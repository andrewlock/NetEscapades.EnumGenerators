using NetEscapades.EnumGenerators.Extensions;
using System.Text;

namespace NetEscapades.EnumGenerators;

public static class SourceGenerationHelper
{
    private const string Header = @"//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the NetEscapades.EnumGenerators source generator
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#nullable enable";

    public const string Attribute = Header + @"

#if NETESCAPADES_ENUMGENERATORS_EMBED_ATTRIBUTES
namespace NetEscapades.EnumGenerators
{
    /// <summary>
    /// Add to enums to indicate that extension methods should be generated for the type
    /// </summary>
    [System.AttributeUsage(System.AttributeTargets.Enum)]
    [System.Diagnostics.Conditional(""NETESCAPADES_ENUMGENERATORS_USAGES"")]
    public class EnumExtensionsAttribute : System.Attribute
    {
        /// <summary>
        /// The namespace to generate the extension class.
        /// If not provided the namespace of the enum will be used
        /// </summary>
        public string? ExtensionClassNamespace { get; set; }

        /// <summary>
        /// The name to use for the extension class.
        /// If not provided, the enum name with ""Extensions"" will be used.
        /// For example for an Enum called StatusCodes, the default name
        /// will be StatusCodesExtensions
        /// </summary>
        public string? ExtensionClassName { get; set; }
    }
}
#endif
";
    public static string GenerateExtensionClass(StringBuilder sb, EnumToGenerate enumToGenerate)
    {
        sb.Append(Header)
            .AppendNamespaceOpening(enumToGenerate.Namespace)
            .AppendClassOpening(enumToGenerate)
            .AppendToStringFastMethod(enumToGenerate)
            .AppendHasFlagsMethod(enumToGenerate)
            .AppendLine().AppendIsDefinedMethod(enumToGenerate)
            .AppendLine().AppendTryParseMethod(enumToGenerate)
            .AppendLine().AppendGetValuesMethod(enumToGenerate)
            .AppendLine().AppendGetNamesMethod(enumToGenerate)
            .AppendClassEnding()
            .AppendNamespaceEnding(enumToGenerate.Namespace);

        return sb.ToString();
    }
}