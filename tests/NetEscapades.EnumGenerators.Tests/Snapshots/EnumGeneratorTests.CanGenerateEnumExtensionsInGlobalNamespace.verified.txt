//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the NetEscapades.EnumGenerators source generator
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#nullable enable
    public static partial class MyEnumExtensions
    {
        /// <summary>
        /// The number of members in the enum.
        /// This is a non-distinct count of defined names.
        /// </summary>
        public const int Length = 2;

        public static string ToStringFast(this MyEnum value)
            => value switch
            {
                MyEnum.First => nameof(MyEnum.First),
                MyEnum.Second => nameof(MyEnum.Second),
                _ => value.ToString(),
            };

       public static bool IsDefined(MyEnum value)
            => value switch
            {
                MyEnum.First => true,
                MyEnum.Second => true,
                _ => false,
            };

        public static bool IsDefined(string name, bool allowMatchingMetadataAttribute)
        {
            return name switch
            {
                nameof(MyEnum.First) => true,
                nameof(MyEnum.Second) => true,
                _ => false,
            };
        }

        public static bool TryParse(
#if NETCOREAPP3_0_OR_GREATER
            [System.Diagnostics.CodeAnalysis.NotNullWhen(true)]
#endif
            string? name, 
            out MyEnum value)
            => TryParse(name, out value, false, false);

        public static bool TryParse(
#if NETCOREAPP3_0_OR_GREATER
            [System.Diagnostics.CodeAnalysis.NotNullWhen(true)]
#endif
            string? name, 
            out MyEnum value,
            bool ignoreCase) 
            => TryParse(name, out value, ignoreCase, false);

        public static bool TryParse(
#if NETCOREAPP3_0_OR_GREATER
            [System.Diagnostics.CodeAnalysis.NotNullWhen(true)]
#endif
            string? name, 
            out MyEnum value, 
            bool ignoreCase, 
            bool allowMatchingMetadataAttribute)
        {

            if (ignoreCase)
            {
                switch (name)
                {
                    case string s when s.Equals(nameof(MyEnum.First), System.StringComparison.OrdinalIgnoreCase):
                        value = MyEnum.First;
                        return true;
                    case string s when s.Equals(nameof(MyEnum.Second), System.StringComparison.OrdinalIgnoreCase):
                        value = MyEnum.Second;
                        return true;
                    case string s when int.TryParse(name, out var val):
                        value = (MyEnum)val;
                        return true;
                    default:
                        value = default;
                        return false;
                }
            }
            else
            {
                switch (name)
                {
                    case nameof(MyEnum.First):
                        value = MyEnum.First;
                        return true;
                    case nameof(MyEnum.Second):
                        value = MyEnum.Second;
                        return true;
                    case string s when int.TryParse(name, out var val):
                        value = (MyEnum)val;
                        return true;
                    default:
                        value = default;
                        return false;
                }
            }
        }

        public static MyEnum[] GetValues()
        {
            return new[]
            {
                MyEnum.First,
                MyEnum.Second,
            };
        }

        public static string[] GetNames()
        {
            return new[]
            {
                nameof(MyEnum.First),
                nameof(MyEnum.Second),
            };
        }
    }