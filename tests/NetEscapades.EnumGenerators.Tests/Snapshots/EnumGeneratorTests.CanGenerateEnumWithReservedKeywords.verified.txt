//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the NetEscapades.EnumGenerators source generator
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#nullable enable

#pragma warning disable CS0612 // Ignore usages of obsolete members or enums
#pragma warning disable CS0618 // Ignore usages of obsolete members or enums
    /// <summary>
    /// Extension methods for <see cref="global::EnumWithReservedKeywords" />
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NetEscapades.EnumGenerators", "FIXED_VERSION")]
    public static partial class EnumWithReservedKeywordsExtensions
    {
        /// <summary>
        /// The number of members in the enum.
        /// This is a non-distinct count of defined names.
        /// </summary>
        public const int Length = 4;

        /// <summary>
        /// Returns the string representation of the <see cref="global::EnumWithReservedKeywords"/> value.
        /// Directly equivalent to calling <c>ToString()</c> on <paramref name="value"/>.
        /// </summary>
        /// <param name="value">The value to retrieve the string value for</param>
        /// <returns>The string representation of the value, the same as that returned by <c>ToString()</c></returns>
        public static string ToStringFast(this global::EnumWithReservedKeywords value)
            => value switch
            {
                global::EnumWithReservedKeywords.number => nameof(global::EnumWithReservedKeywords.number),
                global::EnumWithReservedKeywords.@string => nameof(global::EnumWithReservedKeywords.@string),
                global::EnumWithReservedKeywords.date => nameof(global::EnumWithReservedKeywords.date),
                global::EnumWithReservedKeywords.@class => nameof(global::EnumWithReservedKeywords.@class),
                _ => value.AsUnderlyingType().ToString(),
            };

        /// <summary>
        /// Returns the string representation of the <see cref="global::EnumWithReservedKeywords"/> value.
        /// If the member is decorated with the <see cref="global::System.ComponentModel.DescriptionAttribute"/> attribute
        /// then that value is returned. Otherwise returns uses the name of the member,
        /// equivalent to calling <c>ToString()</c> on <paramref name="value"/>.
        /// </summary>
        /// <param name="value">The value to retrieve the string value for</param>
        /// <param name="useMetadataAttributes">If <see langword="true"/> uses the value provided in the
        ///  <see cref="global::System.ComponentModel.DescriptionAttribute"/> attribute as the string representation of the member.
        /// If <see langword="false"/>, always uses the name of the member, the same as if <c>ToString()</c> was called.</param>
        /// <returns>The string representation of the value</returns>
        public static string ToStringFast(this global::EnumWithReservedKeywords value, bool useMetadataAttributes)
            => useMetadataAttributes ? value.ToStringFastWithMetadata() : value.ToStringFast();

        private static string ToStringFastWithMetadata(this global::EnumWithReservedKeywords value)
            => value switch
            {
                global::EnumWithReservedKeywords.number => "number",
                global::EnumWithReservedKeywords.@string => "string",
                global::EnumWithReservedKeywords.date => "date",
                global::EnumWithReservedKeywords.@class => "class",
                _ => value.AsUnderlyingType().ToString(),
            };

        /// <summary>
        /// Cast a value of <see cref="global::EnumWithReservedKeywords" /> to the underlying type (<c>int</c>).
        /// This is mainly a convenience method.
        /// </summary>
        /// <returns>The value of <see cref="global::EnumWithReservedKeywords" /> cast to the underlying type.</returns>
        public static int AsUnderlyingType(this global::EnumWithReservedKeywords value)
        {
            return (int) value;
        }

        /// <summary>
        /// Returns a boolean telling whether the given enum value exists in the enumeration.
        /// </summary>
        /// <param name="value">The value to check if it's defined</param>
        /// <returns><see langword="true"/> if the value exists in the enumeration, <see langword="false"/> otherwise</returns>
        public static bool IsDefined(global::EnumWithReservedKeywords value)
            => value switch
            {
                global::EnumWithReservedKeywords.number => true,
                global::EnumWithReservedKeywords.@string => true,
                global::EnumWithReservedKeywords.date => true,
                global::EnumWithReservedKeywords.@class => true,
                _ => false,
            };

        /// <summary>
        /// Returns a boolean telling whether an enum with the given name exists in the enumeration.
        /// </summary>
        /// <param name="name">The name to check if it's defined</param>
        /// <returns><see langword="true"/> if a member with the name exists in the enumeration, <see langword="false"/> otherwise</returns>
        public static bool IsDefined(string name)
            => name switch
            {
                nameof(global::EnumWithReservedKeywords.number) => true,
                nameof(global::EnumWithReservedKeywords.@string) => true,
                nameof(global::EnumWithReservedKeywords.date) => true,
                nameof(global::EnumWithReservedKeywords.@class) => true,
            _ => false,
        };

        /// <summary>
        /// Returns a boolean telling whether an enum with the given name exists in the enumeration,
        /// or if a member decorated with <see cref="global::System.ComponentModel.DescriptionAttribute"/>
        /// with the required name exists.
        /// </summary>
        /// <param name="name">The name to check if it's defined</param>
        /// <param name="allowMatchingMetadataAttribute">If <see langword="true"/>,
        /// considers the value of <see cref="global::System.ComponentModel.DescriptionAttribute"/> 
        /// instead of the member name, otherwise ignores them</param>
        /// <returns><see langword="true"/> if a member with the name exists in the enumeration, or a member is decorated
        /// with a <c>[Display]</c> attribute with the name, <see langword="false"/> otherwise</returns>
        public static bool IsDefined(string name, bool allowMatchingMetadataAttribute)
            => allowMatchingMetadataAttribute ? IsMetadataNameDefined(name) : IsDefined(name);

        private static bool IsMetadataNameDefined(string name)
            => name switch
            {
                "number" => true,
                "string" => true,
                "date" => true,
                "class" => true,
                _ => IsDefined(name),
            };

#if NETCOREAPP && !NETCOREAPP2_0 && !NETCOREAPP1_1 && !NETCOREAPP1_0
        /// <summary>
        /// Returns a boolean telling whether an enum with the given name exists in the enumeration
        /// </summary>
        /// <param name="name">The name to check if it's defined</param>
        /// <returns><see langword="true"/> if a member with the name exists in the enumeration, <see langword="false"/> otherwise</returns>
        public static bool IsDefined(in global::System.ReadOnlySpan<char> name)
            => name switch
            {
                global::System.ReadOnlySpan<char> current when global::System.MemoryExtensions.Equals(current, nameof(global::EnumWithReservedKeywords.number), global::System.StringComparison.Ordinal) => true,
                global::System.ReadOnlySpan<char> current when global::System.MemoryExtensions.Equals(current, nameof(global::EnumWithReservedKeywords.@string), global::System.StringComparison.Ordinal) => true,
                global::System.ReadOnlySpan<char> current when global::System.MemoryExtensions.Equals(current, nameof(global::EnumWithReservedKeywords.date), global::System.StringComparison.Ordinal) => true,
                global::System.ReadOnlySpan<char> current when global::System.MemoryExtensions.Equals(current, nameof(global::EnumWithReservedKeywords.@class), global::System.StringComparison.Ordinal) => true,
                _ => false,
            };

        /// <summary>
        /// Returns a boolean telling whether an enum with the given name exists in the enumeration,
        /// or optionally if a member decorated with <see cref="global::System.ComponentModel.DescriptionAttribute"/>
        /// exists. Slower then the <see cref="IsDefined(string, bool)" /> overload, but doesn't allocate memory./>
        /// </summary>
        /// <param name="name">The name to check if it's defined</param>
        /// <param name="allowMatchingMetadataAttribute">If <see langword="true"/>, considers the value of metadata attributes,otherwise ignores them</param>
        /// <returns><see langword="true"/> if a member with the name exists in the enumeration, or a member is decorated
        /// with a <c>[Display]</c> attribute with the name, <see langword="false"/> otherwise</returns>
        public static bool IsDefined(in global::System.ReadOnlySpan<char> name, bool allowMatchingMetadataAttribute)            => allowMatchingMetadataAttribute ? IsMetadataNameDefined(in name) : IsDefined(in name);

        private static bool IsMetadataNameDefined(in global::System.ReadOnlySpan<char> name)
            => name switch
            {
                global::System.ReadOnlySpan<char> current when global::System.MemoryExtensions.Equals(current, "number", global::System.StringComparison.Ordinal) => true,
                global::System.ReadOnlySpan<char> current when global::System.MemoryExtensions.Equals(current, "string", global::System.StringComparison.Ordinal) => true,
                global::System.ReadOnlySpan<char> current when global::System.MemoryExtensions.Equals(current, "date", global::System.StringComparison.Ordinal) => true,
                global::System.ReadOnlySpan<char> current when global::System.MemoryExtensions.Equals(current, "class", global::System.StringComparison.Ordinal) => true,
                _ => IsDefined(name),
            };
#endif

        /// <summary>
        /// Converts the string representation of the name or numeric value of
        /// an <see cref="global::EnumWithReservedKeywords" /> to the equivalent instance.
        /// </summary>
        /// <param name="name">The case-sensitive string representation of the enumeration name or underlying value to convert</param>
        /// <returns>An object of type <see cref="global::EnumWithReservedKeywords" /> whose
        /// value is represented by <paramref name="name"/></returns>
        public static global::EnumWithReservedKeywords Parse(
#if NETCOREAPP3_0_OR_GREATER
            [global::System.Diagnostics.CodeAnalysis.NotNullWhen(true)]
#endif
            string? name)
                => TryParse(name, out var value, false, false) ? value : ThrowValueNotFound(name);

        /// <summary>
        /// Converts the string representation of the name or numeric value of
        /// an <see cref="global::EnumWithReservedKeywords" /> to the equivalent instance.
        /// </summary>
        /// <param name="name">The case-sensitive string representation of the enumeration name or underlying value to convert</param>
        /// <param name="ignoreCase"><see langword="true"/> to read value in case insensitive mode; <see langword="false"/> to read value in case sensitive mode.</param>
        /// <returns>An object of type <see cref="global::EnumWithReservedKeywords" /> whose
        /// value is represented by <paramref name="name"/></returns>
        public static global::EnumWithReservedKeywords Parse(
#if NETCOREAPP3_0_OR_GREATER
            [global::System.Diagnostics.CodeAnalysis.NotNullWhen(true)]
#endif
            string? name,
            bool ignoreCase)
                => TryParse(name, out var value, ignoreCase, false) ? value : ThrowValueNotFound(name);

        /// <summary>
        /// Converts the string representation of the name or numeric value of
        /// an <see cref="global::EnumWithReservedKeywords" /> to the equivalent instance.
        /// </summary>
        /// <param name="name">The case-sensitive string representation of the enumeration name or underlying value to convert</param>
        /// <param name="ignoreCase"><see langword="true"/> to read value in case insensitive mode; <see langword="false"/> to read value in case sensitive mode.</param>
        /// <param name="allowMatchingMetadataAttribute">If <see langword="true"/>, considers the value included in metadata attributes such as
        /// <c>[Display]</c> attribute when parsing, otherwise only considers the member names.</param>
        /// <returns>An object of type <see cref="global::EnumWithReservedKeywords" /> whose
        /// value is represented by <paramref name="name"/></returns>
        public static global::EnumWithReservedKeywords Parse(
#if NETCOREAPP3_0_OR_GREATER
            [global::System.Diagnostics.CodeAnalysis.NotNullWhen(true)]
#endif
            string? name,
            bool ignoreCase,
            bool allowMatchingMetadataAttribute)
                => TryParse(name, out var value, ignoreCase, allowMatchingMetadataAttribute) ? value : ThrowValueNotFound(name);

#if NETCOREAPP3_0_OR_GREATER
        [global::System.Diagnostics.CodeAnalysis.DoesNotReturn]
#endif
        private static global::EnumWithReservedKeywords ThrowValueNotFound(string? name)
            => throw new global::System.ArgumentException($"Requested value '{name}' was not found.");

        /// <summary>
        /// Converts the string representation of the name or numeric value of
        /// an <see cref="global::EnumWithReservedKeywords" /> to the equivalent instance.
        /// The return value indicates whether the conversion succeeded.
        /// </summary>
        /// <param name="name">The case-sensitive string representation of the enumeration name or underlying value to convert</param>
        /// <param name="value">When this method returns, contains an object of type
        /// <see cref="global::EnumWithReservedKeywords" /> whose
        /// value is represented by <paramref name="value"/> if the parse operation succeeds.
        /// If the parse operation fails, contains the default value of the underlying type
        /// of <see cref="global::EnumWithReservedKeywords" />. This parameter is passed uninitialized.</param>
        /// <returns><see langword="true"/> if the value parameter was converted successfully; otherwise, <see langword="false"/>.</returns>
        public static bool TryParse(
#if NETCOREAPP3_0_OR_GREATER
            [global::System.Diagnostics.CodeAnalysis.NotNullWhen(true)]
#endif
            string? name,
            out global::EnumWithReservedKeywords value)
            => TryParse(name, out value, false, false);

        /// <summary>
        /// Converts the string representation of the name or numeric value of
        /// an <see cref="global::EnumWithReservedKeywords" /> to the equivalent instance.
        /// The return value indicates whether the conversion succeeded.
        /// </summary>
        /// <param name="name">The string representation of the enumeration name or underlying value to convert</param>
        /// <param name="value">When this method returns, contains an object of type
        /// <see cref="global::EnumWithReservedKeywords" /> whose
        /// value is represented by <paramref name="value"/> if the parse operation succeeds.
        /// If the parse operation fails, contains the default value of the underlying type
        /// of <see cref="global::EnumWithReservedKeywords" />. This parameter is passed uninitialized.</param>
        /// <param name="ignoreCase"><see langword="true"/> to read value in case insensitive mode; <see langword="false"/> to read value in case sensitive mode.</param>
        /// <returns><see langword="true"/> if the value parameter was converted successfully; otherwise, <see langword="false"/>.</returns>
        public static bool TryParse(
#if NETCOREAPP3_0_OR_GREATER
            [global::System.Diagnostics.CodeAnalysis.NotNullWhen(true)]
#endif
            string? name,
            out global::EnumWithReservedKeywords value,
            bool ignoreCase)
            => TryParse(name, out value, ignoreCase, false);

        /// <summary>
        /// Converts the string representation of the name or numeric value of
        /// an <see cref="global::EnumWithReservedKeywords" /> to the equivalent instance.
        /// The return value indicates whether the conversion succeeded.
        /// </summary>
        /// <param name="name">The string representation of the enumeration name or underlying value to convert</param>
        /// <param name="value">When this method returns, contains an object of type
        /// <see cref="global::EnumWithReservedKeywords" /> whose
        /// value is represented by <paramref name="value"/> if the parse operation succeeds.
        /// If the parse operation fails, contains the default value of the underlying type
        /// of <see cref="global::EnumWithReservedKeywords" />. This parameter is passed uninitialized.</param>
        /// <param name="ignoreCase"><see langword="true"/> to read value in case insensitive mode; <see langword="false"/> to read value in case sensitive mode.</param>
        /// <param name="allowMatchingMetadataAttribute">If <see langword="true"/>, 
        /// considers the value included in <see cref="global::System.ComponentModel.DescriptionAttribute"/> attribute 
        /// when parsing, otherwise only considers the member names.</param>
        /// <returns><see langword="true"/> if the value parameter was converted successfully; otherwise, <see langword="false"/>.</returns>
        public static bool TryParse(
#if NETCOREAPP3_0_OR_GREATER
            [global::System.Diagnostics.CodeAnalysis.NotNullWhen(true)]
#endif
            string? name,
            out global::EnumWithReservedKeywords value,
            bool ignoreCase,
            bool allowMatchingMetadataAttribute)
                => ignoreCase
                    ? TryParseIgnoreCase(name, out value, allowMatchingMetadataAttribute)
                    : TryParseWithCase(name, out value, allowMatchingMetadataAttribute);

        private static bool TryParseIgnoreCase(
#if NETCOREAPP3_0_OR_GREATER
            [global::System.Diagnostics.CodeAnalysis.NotNullWhen(true)]
#endif
            string? name,
            out global::EnumWithReservedKeywords value,
            bool allowMatchingMetadataAttribute)
        {
            if (allowMatchingMetadataAttribute)
            {
                switch (name)
                {
                    case string s when s.Equals("number", global::System.StringComparison.OrdinalIgnoreCase):
                        value = global::EnumWithReservedKeywords.number;
                        return true;
                    case string s when s.Equals("string", global::System.StringComparison.OrdinalIgnoreCase):
                        value = global::EnumWithReservedKeywords.@string;
                        return true;
                    case string s when s.Equals("date", global::System.StringComparison.OrdinalIgnoreCase):
                        value = global::EnumWithReservedKeywords.date;
                        return true;
                    case string s when s.Equals("class", global::System.StringComparison.OrdinalIgnoreCase):
                        value = global::EnumWithReservedKeywords.@class;
                        return true;
                    default:
                        break;
                };
            }

            switch (name)
            {
                case string s when s.Equals(nameof(global::EnumWithReservedKeywords.number), global::System.StringComparison.OrdinalIgnoreCase):
                    value = global::EnumWithReservedKeywords.number;
                    return true;
                case string s when s.Equals(nameof(global::EnumWithReservedKeywords.@string), global::System.StringComparison.OrdinalIgnoreCase):
                    value = global::EnumWithReservedKeywords.@string;
                    return true;
                case string s when s.Equals(nameof(global::EnumWithReservedKeywords.date), global::System.StringComparison.OrdinalIgnoreCase):
                    value = global::EnumWithReservedKeywords.date;
                    return true;
                case string s when s.Equals(nameof(global::EnumWithReservedKeywords.@class), global::System.StringComparison.OrdinalIgnoreCase):
                    value = global::EnumWithReservedKeywords.@class;
                    return true;
                case string s when int.TryParse(name, out var val):
                    value = (global::EnumWithReservedKeywords)val;
                    return true;
                default:
                    value = default;
                    return false;
            }
        }

        private static bool TryParseWithCase(
#if NETCOREAPP3_0_OR_GREATER
            [global::System.Diagnostics.CodeAnalysis.NotNullWhen(true)]
#endif
            string? name,
            out global::EnumWithReservedKeywords value,
            bool allowMatchingMetadataAttribute)
        {
            if (allowMatchingMetadataAttribute)
            {
                switch (name)
                {
                    case "number":
                        value = global::EnumWithReservedKeywords.number;
                        return true;
                    case "string":
                        value = global::EnumWithReservedKeywords.@string;
                        return true;
                    case "date":
                        value = global::EnumWithReservedKeywords.date;
                        return true;
                    case "class":
                        value = global::EnumWithReservedKeywords.@class;
                        return true;
                    default:
                        break;
                };
            }

            switch (name)
            {
                case nameof(global::EnumWithReservedKeywords.number):
                    value = global::EnumWithReservedKeywords.number;
                    return true;
                case nameof(global::EnumWithReservedKeywords.@string):
                    value = global::EnumWithReservedKeywords.@string;
                    return true;
                case nameof(global::EnumWithReservedKeywords.date):
                    value = global::EnumWithReservedKeywords.date;
                    return true;
                case nameof(global::EnumWithReservedKeywords.@class):
                    value = global::EnumWithReservedKeywords.@class;
                    return true;
                case string s when int.TryParse(name, out var val):
                    value = (global::EnumWithReservedKeywords)val;
                    return true;
                default:
                    value = default;
                    return false;
            }
        }

#if NETCOREAPP && !NETCOREAPP2_0 && !NETCOREAPP1_1 && !NETCOREAPP1_0
        /// <summary>
        /// Converts the string representation of the name or numeric value of
        /// an <see cref="global::EnumWithReservedKeywords" /> to the equivalent instance.
        /// </summary>
        /// <param name="name">The case-sensitive string representation of the enumeration name or underlying value to convert</param>
        /// <returns>An object of type <see cref="global::EnumWithReservedKeywords" /> whose
        /// value is represented by <paramref name="name"/></returns>
        public static global::EnumWithReservedKeywords Parse(
#if NETCOREAPP3_0_OR_GREATER
            [global::System.Diagnostics.CodeAnalysis.NotNullWhen(true)]
#endif
            in global::System.ReadOnlySpan<char> name)
                => TryParse(name, out var value, false, false) ? value : ThrowValueNotFound(name.ToString());

        /// <summary>
        /// Converts the string representation of the name or numeric value of
        /// an <see cref="global::EnumWithReservedKeywords" /> to the equivalent instance.
        /// </summary>
        /// <param name="name">The case-sensitive string representation of the enumeration name or underlying value to convert</param>
        /// <param name="ignoreCase"><see langword="true"/> to read value in case insensitive mode; <see langword="false"/> to read value in case sensitive mode.</param>
        /// <returns>An object of type <see cref="global::EnumWithReservedKeywords" /> whose
        /// value is represented by <paramref name="name"/></returns>
        public static global::EnumWithReservedKeywords Parse(
#if NETCOREAPP3_0_OR_GREATER
            [global::System.Diagnostics.CodeAnalysis.NotNullWhen(true)]
#endif
            in global::System.ReadOnlySpan<char> name,
            bool ignoreCase)
                => TryParse(name, out var value, ignoreCase, false) ? value : ThrowValueNotFound(name.ToString());

        /// <summary>
        /// Converts the string representation of the name or numeric value of
        /// an <see cref="global::EnumWithReservedKeywords" /> to the equivalent instance.
        /// </summary>
        /// <param name="name">The case-sensitive string representation of the enumeration name or underlying value to convert</param>
        /// <param name="ignoreCase"><see langword="true"/> to read value in case insensitive mode; <see langword="false"/> to read value in case sensitive mode.</param>
        /// <param name="allowMatchingMetadataAttribute">If <see langword="true"/>, considers the value included in 
        /// <see cref="global::System.ComponentModel.DescriptionAttribute"/> attribute when parsing, otherwise only considers the member names.</param>
        /// <returns>An object of type <see cref="global::EnumWithReservedKeywords" /> whose
        /// value is represented by <paramref name="name"/></returns>
        public static global::EnumWithReservedKeywords Parse(
#if NETCOREAPP3_0_OR_GREATER
            [global::System.Diagnostics.CodeAnalysis.NotNullWhen(true)]
#endif
            in global::System.ReadOnlySpan<char> name,
            bool ignoreCase,
            bool allowMatchingMetadataAttribute)
                => TryParse(name, out var value, ignoreCase, allowMatchingMetadataAttribute) ? value : ThrowValueNotFound(name.ToString());

        /// <summary>
        /// Converts the span representation of the name or numeric value of
        /// an <see cref="global::EnumWithReservedKeywords" /> to the equivalent instance.
        /// The return value indicates whether the conversion succeeded.
        /// </summary>
        /// <param name="name">The span representation of the enumeration name or underlying value to convert</param>
        /// <param name="value">When this method returns, contains an object of type
        /// <see cref="global::EnumWithReservedKeywords" /> whose
        /// value is represented by <paramref name="value"/> if the parse operation succeeds.
        /// If the parse operation fails, contains the default value of the underlying type
        /// of <see cref="global::EnumWithReservedKeywords" />. This parameter is passed uninitialized.</param>
        /// <returns><see langword="true"/> if the value parameter was converted successfully; otherwise, <see langword="false"/>.</returns>
        public static bool TryParse(
#if NETCOREAPP3_0_OR_GREATER
            [global::System.Diagnostics.CodeAnalysis.NotNullWhen(true)]
#endif
            in global::System.ReadOnlySpan<char> name,
            out global::EnumWithReservedKeywords value)
            => TryParse(name, out value, false, false);

        /// <summary>
        /// Converts the span representation of the name or numeric value of
        /// an <see cref="global::EnumWithReservedKeywords" /> to the equivalent instance.
        /// The return value indicates whether the conversion succeeded.
        /// </summary>
        /// <param name="name">The span representation of the enumeration name or underlying value to convert</param>
        /// <param name="value">When this method returns, contains an object of type
        /// <see cref="global::EnumWithReservedKeywords" /> whose
        /// value is represented by <paramref name="value"/> if the parse operation succeeds.
        /// If the parse operation fails, contains the default value of the underlying type
        /// of <see cref="global::EnumWithReservedKeywords" />. This parameter is passed uninitialized.</param>
        /// <param name="ignoreCase"><see langword="true"/> to read value in case insensitive mode; <see langword="false"/> to read value in case sensitive mode.</param>
        /// <returns><see langword="true"/> if the value parameter was converted successfully; otherwise, <see langword="false"/>.</returns>
        public static bool TryParse(
#if NETCOREAPP3_0_OR_GREATER
            [global::System.Diagnostics.CodeAnalysis.NotNullWhen(true)]
#endif
            in global::System.ReadOnlySpan<char> name,
            out global::EnumWithReservedKeywords value,
            bool ignoreCase)
            => TryParse(name, out value, ignoreCase, false);

        /// <summary>
        /// Converts the span representation of the name or numeric value of
        /// an <see cref="global::EnumWithReservedKeywords" /> to the equivalent instance.
        /// The return value indicates whether the conversion succeeded.
        /// </summary>
        /// <param name="name">The span representation of the enumeration name or underlying value to convert</param>
        /// <param name="result">When this method returns, contains an object of type
        /// <see cref="global::EnumWithReservedKeywords" /> whose
        /// value is represented by <paramref name="result"/> if the parse operation succeeds.
        /// If the parse operation fails, contains the default value of the underlying type
        /// of <see cref="global::EnumWithReservedKeywords" />. This parameter is passed uninitialized.</param>
        /// <param name="ignoreCase"><see langword="true"/> to read value in case insensitive mode; <see langword="false"/> to read value in case sensitive mode.</param>
        /// <param name="allowMatchingMetadataAttribute">If <see langword="true"/>, considers the value included in 
        /// <see cref="global::System.ComponentModel.DescriptionAttribute"/> attribute when parsing, otherwise only considers the member names.</param>
        /// <returns><see langword="true"/> if the value parameter was converted successfully; otherwise, <see langword="false"/>.</returns>
        public static bool TryParse(
#if NETCOREAPP3_0_OR_GREATER
            [global::System.Diagnostics.CodeAnalysis.NotNullWhen(true)]
#endif
            in global::System.ReadOnlySpan<char> name,
            out global::EnumWithReservedKeywords result,
            bool ignoreCase,
            bool allowMatchingMetadataAttribute)
                => ignoreCase
                    ? TryParseIgnoreCase(in name, out result, allowMatchingMetadataAttribute)
                    : TryParseWithCase(in name, out result, allowMatchingMetadataAttribute);

        private static bool TryParseIgnoreCase(
#if NETCOREAPP3_0_OR_GREATER
            [global::System.Diagnostics.CodeAnalysis.NotNullWhen(true)]
#endif
            in global::System.ReadOnlySpan<char> name,
            out global::EnumWithReservedKeywords result,
            bool allowMatchingMetadataAttribute)
        {
            if (allowMatchingMetadataAttribute)
            {
                switch (name)
                {
                    case global::System.ReadOnlySpan<char> current when global::System.MemoryExtensions.Equals(current, "number", global::System.StringComparison.OrdinalIgnoreCase):
                        result = global::EnumWithReservedKeywords.number;
                        return true;
                    case global::System.ReadOnlySpan<char> current when global::System.MemoryExtensions.Equals(current, "string", global::System.StringComparison.OrdinalIgnoreCase):
                        result = global::EnumWithReservedKeywords.@string;
                        return true;
                    case global::System.ReadOnlySpan<char> current when global::System.MemoryExtensions.Equals(current, "date", global::System.StringComparison.OrdinalIgnoreCase):
                        result = global::EnumWithReservedKeywords.date;
                        return true;
                    case global::System.ReadOnlySpan<char> current when global::System.MemoryExtensions.Equals(current, "class", global::System.StringComparison.OrdinalIgnoreCase):
                        result = global::EnumWithReservedKeywords.@class;
                        return true;
                    default:
                        break;
                };
            }

            switch (name)
            {
                case global::System.ReadOnlySpan<char> current when global::System.MemoryExtensions.Equals(current, nameof(global::EnumWithReservedKeywords.number), global::System.StringComparison.OrdinalIgnoreCase):
                    result = global::EnumWithReservedKeywords.number;
                    return true;
                case global::System.ReadOnlySpan<char> current when global::System.MemoryExtensions.Equals(current, nameof(global::EnumWithReservedKeywords.@string), global::System.StringComparison.OrdinalIgnoreCase):
                    result = global::EnumWithReservedKeywords.@string;
                    return true;
                case global::System.ReadOnlySpan<char> current when global::System.MemoryExtensions.Equals(current, nameof(global::EnumWithReservedKeywords.date), global::System.StringComparison.OrdinalIgnoreCase):
                    result = global::EnumWithReservedKeywords.date;
                    return true;
                case global::System.ReadOnlySpan<char> current when global::System.MemoryExtensions.Equals(current, nameof(global::EnumWithReservedKeywords.@class), global::System.StringComparison.OrdinalIgnoreCase):
                    result = global::EnumWithReservedKeywords.@class;
                    return true;
                case global::System.ReadOnlySpan<char> current when int.TryParse(name, out var numericResult):
                    result = (global::EnumWithReservedKeywords)numericResult;
                    return true;
                default:
                    result = default;
                    return false;
            }
        }

        private static bool TryParseWithCase(
#if NETCOREAPP3_0_OR_GREATER
            [global::System.Diagnostics.CodeAnalysis.NotNullWhen(true)]
#endif
            in global::System.ReadOnlySpan<char> name,
            out global::EnumWithReservedKeywords result,
            bool allowMatchingMetadataAttribute)
        {
            if (allowMatchingMetadataAttribute)
            {
                switch (name)
                {
                    case global::System.ReadOnlySpan<char> current when global::System.MemoryExtensions.Equals(current, "number", global::System.StringComparison.Ordinal):
                        result = global::EnumWithReservedKeywords.number;
                        return true;
                    case global::System.ReadOnlySpan<char> current when global::System.MemoryExtensions.Equals(current, "string", global::System.StringComparison.Ordinal):
                        result = global::EnumWithReservedKeywords.@string;
                        return true;
                    case global::System.ReadOnlySpan<char> current when global::System.MemoryExtensions.Equals(current, "date", global::System.StringComparison.Ordinal):
                        result = global::EnumWithReservedKeywords.date;
                        return true;
                    case global::System.ReadOnlySpan<char> current when global::System.MemoryExtensions.Equals(current, "class", global::System.StringComparison.Ordinal):
                        result = global::EnumWithReservedKeywords.@class;
                        return true;
                    default:
                        break;
                };
            }

            switch (name)
            {
                case global::System.ReadOnlySpan<char> current when global::System.MemoryExtensions.Equals(current, nameof(global::EnumWithReservedKeywords.number), global::System.StringComparison.Ordinal):
                    result = global::EnumWithReservedKeywords.number;
                    return true;
                case global::System.ReadOnlySpan<char> current when global::System.MemoryExtensions.Equals(current, nameof(global::EnumWithReservedKeywords.@string), global::System.StringComparison.Ordinal):
                    result = global::EnumWithReservedKeywords.@string;
                    return true;
                case global::System.ReadOnlySpan<char> current when global::System.MemoryExtensions.Equals(current, nameof(global::EnumWithReservedKeywords.date), global::System.StringComparison.Ordinal):
                    result = global::EnumWithReservedKeywords.date;
                    return true;
                case global::System.ReadOnlySpan<char> current when global::System.MemoryExtensions.Equals(current, nameof(global::EnumWithReservedKeywords.@class), global::System.StringComparison.Ordinal):
                    result = global::EnumWithReservedKeywords.@class;
                    return true;
                case global::System.ReadOnlySpan<char> current when int.TryParse(name, out var numericResult):
                    result = (global::EnumWithReservedKeywords)numericResult;
                    return true;
                default:
                    result = default;
                    return false;
            }
        }
#endif

        /// <summary>
        /// Retrieves an array of the values of the members defined in
        /// <see cref="global::EnumWithReservedKeywords" />.
        /// Note that this returns a new array with every invocation, so
        /// should be cached if appropriate.
        /// </summary>
        /// <returns>An array of the values defined in <see cref="global::EnumWithReservedKeywords" /></returns>
        public static global::EnumWithReservedKeywords[] GetValues()
        {
            return new[]
            {
                global::EnumWithReservedKeywords.number,
                global::EnumWithReservedKeywords.@string,
                global::EnumWithReservedKeywords.date,
                global::EnumWithReservedKeywords.@class,
            };
        }

        /// <summary>
        /// Retrieves an array of the underlying-values of the members defined in
        /// <see cref="global::EnumWithReservedKeywords" />.
        /// Note that this returns a new array with every invocation, so
        /// should be cached if appropriate.
        /// </summary>
        /// <returns>An array of the underlying-values defined in <see cref="global::EnumWithReservedKeywords" /></returns>
        public static int[] GetValuesAsUnderlyingType()
        {
            return new[]
            {
                (int) global::EnumWithReservedKeywords.number,
                (int) global::EnumWithReservedKeywords.@string,
                (int) global::EnumWithReservedKeywords.date,
                (int) global::EnumWithReservedKeywords.@class,
            };
        }

        /// <summary>
        /// Retrieves an array of the names of the members defined in
        /// <see cref="global::EnumWithReservedKeywords" />.
        /// Note that this returns a new array with every invocation, so
        /// should be cached if appropriate.
        /// </summary>
        /// <returns>An array of the names of the members defined in <see cref="global::EnumWithReservedKeywords" /></returns>
        public static string[] GetNames()
        {
            return new[]
            {
                nameof(global::EnumWithReservedKeywords.number),
                nameof(global::EnumWithReservedKeywords.@string),
                nameof(global::EnumWithReservedKeywords.date),
                nameof(global::EnumWithReservedKeywords.@class),
            };
        }
    }
#pragma warning restore CS0612 // Ignore usages of obsolete members or enums
#pragma warning restore CS0618 // Ignore usages of obsolete members or enums