[  
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the NetEscapades.EnumGenerators source generator
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#nullable enable
#if NETCOREAPP && !NETCOREAPP2_0 && !NETCOREAPP1_1 && !NETCOREAPP1_0
using System;
#endif

namespace System
{
#pragma warning disable CS0612 // Ignore usages of obsolete members or enums
#pragma warning disable CS0618 // Ignore usages of obsolete members or enums
    /// <summary>
    /// Extension methods for <see cref="global::System.ConsoleColor" />
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NetEscapades.EnumGenerators", "FIXED_VERSION")]
    public static partial class ConsoleColorExtensions
    {
        /// <summary>
        /// The number of members in the enum.
        /// This is a non-distinct count of defined names.
        /// </summary>
        public const int Length = 16;

        /// <summary>
        /// Returns the string representation of the <see cref="global::System.ConsoleColor"/> value.
        /// If the attribute is decorated with a <c>[Display]</c> or <c>[Description]</c>attribute, then
        /// uses the provided value. Otherwise uses the name of the member, equivalent to
        /// calling <c>ToString()</c> on <paramref name="value"/>.
        /// </summary>
        /// <param name="value">The value to retrieve the string value for</param>
        /// <param name="useMetadataAttributes">If <c>true</c> uses the value provided in the
        /// <c>[Display]</c> or <c>[Description]</c>attribute as the string representation of the member.
        /// If <c>false</c>, always uses the name of the member, the same as if <c>ToString()</c> was called.</param>
        /// <returns>The string representation of the value</returns>
        public static string ToStringFast(this global::System.ConsoleColor value, bool useMetadataAttributes)
            => useMetadataAttributes ? value.ToStringFastWithMetadata() : value.ToStringFast();

        /// <summary>
        /// Returns the string representation of the <see cref="global::System.ConsoleColor"/> value.
        /// Directly equivalent to calling <c>ToString()</c> on <paramref name="value"/>.
        /// </summary>
        /// <param name="value">The value to retrieve the string value for</param>
        /// <returns>The string representation of the value, the same as that returned by <c>ToString()</c></returns>
        public static string ToStringFast(this global::System.ConsoleColor value)
            => value switch
            {
                global::System.ConsoleColor.Black => nameof(global::System.ConsoleColor.Black),
                global::System.ConsoleColor.DarkBlue => nameof(global::System.ConsoleColor.DarkBlue),
                global::System.ConsoleColor.DarkGreen => nameof(global::System.ConsoleColor.DarkGreen),
                global::System.ConsoleColor.DarkCyan => nameof(global::System.ConsoleColor.DarkCyan),
                global::System.ConsoleColor.DarkRed => nameof(global::System.ConsoleColor.DarkRed),
                global::System.ConsoleColor.DarkMagenta => nameof(global::System.ConsoleColor.DarkMagenta),
                global::System.ConsoleColor.DarkYellow => nameof(global::System.ConsoleColor.DarkYellow),
                global::System.ConsoleColor.Gray => nameof(global::System.ConsoleColor.Gray),
                global::System.ConsoleColor.DarkGray => nameof(global::System.ConsoleColor.DarkGray),
                global::System.ConsoleColor.Blue => nameof(global::System.ConsoleColor.Blue),
                global::System.ConsoleColor.Green => nameof(global::System.ConsoleColor.Green),
                global::System.ConsoleColor.Cyan => nameof(global::System.ConsoleColor.Cyan),
                global::System.ConsoleColor.Red => nameof(global::System.ConsoleColor.Red),
                global::System.ConsoleColor.Magenta => nameof(global::System.ConsoleColor.Magenta),
                global::System.ConsoleColor.Yellow => nameof(global::System.ConsoleColor.Yellow),
                global::System.ConsoleColor.White => nameof(global::System.ConsoleColor.White),
                _ => value.ToString(),
            };

        private static string ToStringFastWithMetadata(this global::System.ConsoleColor value)
            => value.ToStringFast();

        /// <summary>
        /// Returns a boolean telling whether the given enum value exists in the enumeration.
        /// </summary>
        /// <param name="value">The value to check if it's defined</param>
        /// <returns><c>true</c> if the value exists in the enumeration, <c>false</c> otherwise</returns>
        public static bool IsDefined(global::System.ConsoleColor value)
            => value switch
            {
                global::System.ConsoleColor.Black => true,
                global::System.ConsoleColor.DarkBlue => true,
                global::System.ConsoleColor.DarkGreen => true,
                global::System.ConsoleColor.DarkCyan => true,
                global::System.ConsoleColor.DarkRed => true,
                global::System.ConsoleColor.DarkMagenta => true,
                global::System.ConsoleColor.DarkYellow => true,
                global::System.ConsoleColor.Gray => true,
                global::System.ConsoleColor.DarkGray => true,
                global::System.ConsoleColor.Blue => true,
                global::System.ConsoleColor.Green => true,
                global::System.ConsoleColor.Cyan => true,
                global::System.ConsoleColor.Red => true,
                global::System.ConsoleColor.Magenta => true,
                global::System.ConsoleColor.Yellow => true,
                global::System.ConsoleColor.White => true,
                _ => false,
            };

        /// <summary>
        /// Returns a boolean telling whether an enum with the given name exists in the enumeration.
        /// </summary>
        /// <param name="name">The name to check if it's defined</param>
        /// <returns><c>true</c> if a member with the name exists in the enumeration, <c>false</c> otherwise</returns>
        public static bool IsDefined(string name) => IsDefined(name, allowMatchingMetadataAttribute: false);

        /// <summary>
        /// Returns a boolean telling whether an enum with the given name exists in the enumeration,
        /// or if a member decorated with a <c>[Display]</c> attribute
        /// with the required name exists.
        /// </summary>
        /// <param name="name">The name to check if it's defined</param>
        /// <param name="allowMatchingMetadataAttribute">If <c>true</c>, considers the value of metadata attributes,otherwise ignores them</param>
        /// <returns><c>true</c> if a member with the name exists in the enumeration, or a member is decorated
        /// with a <c>[Display]</c> attribute with the name, <c>false</c> otherwise</returns>
        public static bool IsDefined(string name, bool allowMatchingMetadataAttribute)
        {
            return name switch
            {
                nameof(global::System.ConsoleColor.Black) => true,
                nameof(global::System.ConsoleColor.DarkBlue) => true,
                nameof(global::System.ConsoleColor.DarkGreen) => true,
                nameof(global::System.ConsoleColor.DarkCyan) => true,
                nameof(global::System.ConsoleColor.DarkRed) => true,
                nameof(global::System.ConsoleColor.DarkMagenta) => true,
                nameof(global::System.ConsoleColor.DarkYellow) => true,
                nameof(global::System.ConsoleColor.Gray) => true,
                nameof(global::System.ConsoleColor.DarkGray) => true,
                nameof(global::System.ConsoleColor.Blue) => true,
                nameof(global::System.ConsoleColor.Green) => true,
                nameof(global::System.ConsoleColor.Cyan) => true,
                nameof(global::System.ConsoleColor.Red) => true,
                nameof(global::System.ConsoleColor.Magenta) => true,
                nameof(global::System.ConsoleColor.Yellow) => true,
                nameof(global::System.ConsoleColor.White) => true,
                _ => false,
            };
        }

#if NETCOREAPP && !NETCOREAPP2_0 && !NETCOREAPP1_1 && !NETCOREAPP1_0
        /// <summary>
        /// Returns a boolean telling whether an enum with the given name exists in the enumeration
        /// </summary>
        /// <param name="name">The name to check if it's defined</param>
        /// <returns><c>true</c> if a member with the name exists in the enumeration, <c>false</c> otherwise</returns>
        public static bool IsDefined(in ReadOnlySpan<char> name) => IsDefined(name, allowMatchingMetadataAttribute: false);

        /// <summary>
        /// Returns a boolean telling whether an enum with the given name exists in the enumeration,
        /// or optionally if a member decorated with a <c>[Display]</c> attribute
        /// with the required name exists.
        /// Slower then the <see cref="IsDefined(string, bool)" /> overload, but doesn't allocate memory./>
        /// </summary>
        /// <param name="name">The name to check if it's defined</param>
        /// <param name="allowMatchingMetadataAttribute">If <c>true</c>, considers the value of metadata attributes,otherwise ignores them</param>
        /// <returns><c>true</c> if a member with the name exists in the enumeration, or a member is decorated
        /// with a <c>[Display]</c> attribute with the name, <c>false</c> otherwise</returns>
        public static bool IsDefined(in ReadOnlySpan<char> name, bool allowMatchingMetadataAttribute)
        {
            return name switch
            {
                ReadOnlySpan<char> current when current.Equals(nameof(global::System.ConsoleColor.Black).AsSpan(), global::System.StringComparison.Ordinal) => true,
                ReadOnlySpan<char> current when current.Equals(nameof(global::System.ConsoleColor.DarkBlue).AsSpan(), global::System.StringComparison.Ordinal) => true,
                ReadOnlySpan<char> current when current.Equals(nameof(global::System.ConsoleColor.DarkGreen).AsSpan(), global::System.StringComparison.Ordinal) => true,
                ReadOnlySpan<char> current when current.Equals(nameof(global::System.ConsoleColor.DarkCyan).AsSpan(), global::System.StringComparison.Ordinal) => true,
                ReadOnlySpan<char> current when current.Equals(nameof(global::System.ConsoleColor.DarkRed).AsSpan(), global::System.StringComparison.Ordinal) => true,
                ReadOnlySpan<char> current when current.Equals(nameof(global::System.ConsoleColor.DarkMagenta).AsSpan(), global::System.StringComparison.Ordinal) => true,
                ReadOnlySpan<char> current when current.Equals(nameof(global::System.ConsoleColor.DarkYellow).AsSpan(), global::System.StringComparison.Ordinal) => true,
                ReadOnlySpan<char> current when current.Equals(nameof(global::System.ConsoleColor.Gray).AsSpan(), global::System.StringComparison.Ordinal) => true,
                ReadOnlySpan<char> current when current.Equals(nameof(global::System.ConsoleColor.DarkGray).AsSpan(), global::System.StringComparison.Ordinal) => true,
                ReadOnlySpan<char> current when current.Equals(nameof(global::System.ConsoleColor.Blue).AsSpan(), global::System.StringComparison.Ordinal) => true,
                ReadOnlySpan<char> current when current.Equals(nameof(global::System.ConsoleColor.Green).AsSpan(), global::System.StringComparison.Ordinal) => true,
                ReadOnlySpan<char> current when current.Equals(nameof(global::System.ConsoleColor.Cyan).AsSpan(), global::System.StringComparison.Ordinal) => true,
                ReadOnlySpan<char> current when current.Equals(nameof(global::System.ConsoleColor.Red).AsSpan(), global::System.StringComparison.Ordinal) => true,
                ReadOnlySpan<char> current when current.Equals(nameof(global::System.ConsoleColor.Magenta).AsSpan(), global::System.StringComparison.Ordinal) => true,
                ReadOnlySpan<char> current when current.Equals(nameof(global::System.ConsoleColor.Yellow).AsSpan(), global::System.StringComparison.Ordinal) => true,
                ReadOnlySpan<char> current when current.Equals(nameof(global::System.ConsoleColor.White).AsSpan(), global::System.StringComparison.Ordinal) => true,
                _ => false,
            };
        }
#endif

        /// <summary>
        /// Converts the string representation of the name or numeric value of
        /// an <see cref="global::System.ConsoleColor" /> to the equivalent instance.
        /// </summary>
        /// <param name="name">The case-sensitive string representation of the enumeration name or underlying value to convert</param>
        /// <returns>An object of type <see cref="global::System.ConsoleColor" /> whose
        /// value is represented by <paramref name="name"/></returns>
        public static global::System.ConsoleColor Parse(
#if NETCOREAPP3_0_OR_GREATER
            [global::System.Diagnostics.CodeAnalysis.NotNullWhen(true)]
#endif
            string? name)
                => TryParse(name, out var value, false, false) ? value : ThrowValueNotFound(name);

        /// <summary>
        /// Converts the string representation of the name or numeric value of
        /// an <see cref="global::System.ConsoleColor" /> to the equivalent instance.
        /// </summary>
        /// <param name="name">The case-sensitive string representation of the enumeration name or underlying value to convert</param>
        /// <param name="ignoreCase"><c>true</c> to read value in case insensitive mode; <c>false</c> to read value in case sensitive mode.</param>
        /// <returns>An object of type <see cref="global::System.ConsoleColor" /> whose
        /// value is represented by <paramref name="name"/></returns>
        public static global::System.ConsoleColor Parse(
#if NETCOREAPP3_0_OR_GREATER
            [global::System.Diagnostics.CodeAnalysis.NotNullWhen(true)]
#endif
            string? name,
            bool ignoreCase)
                => TryParse(name, out var value, ignoreCase, false) ? value : ThrowValueNotFound(name);

        /// <summary>
        /// Converts the string representation of the name or numeric value of
        /// an <see cref="global::System.ConsoleColor" /> to the equivalent instance.
        /// </summary>
        /// <param name="name">The case-sensitive string representation of the enumeration name or underlying value to convert</param>
        /// <param name="ignoreCase"><c>true</c> to read value in case insensitive mode; <c>false</c> to read value in case sensitive mode.</param>
        /// <param name="allowMatchingMetadataAttribute">If <c>true</c>, considers the value included in metadata attributes such as
        /// <c>[Display]</c> attribute when parsing, otherwise only considers the member names.</param>
        /// <returns>An object of type <see cref="global::System.ConsoleColor" /> whose
        /// value is represented by <paramref name="name"/></returns>
        public static global::System.ConsoleColor Parse(
#if NETCOREAPP3_0_OR_GREATER
            [global::System.Diagnostics.CodeAnalysis.NotNullWhen(true)]
#endif
            string? name,
            bool ignoreCase,
            bool allowMatchingMetadataAttribute)
                => TryParse(name, out var value, ignoreCase, allowMatchingMetadataAttribute) ? value : ThrowValueNotFound(name);
    
#if NETCOREAPP3_0_OR_GREATER
        [global::System.Diagnostics.CodeAnalysis.DoesNotReturn]
#endif
        private static global::System.ConsoleColor ThrowValueNotFound(string? name)
            => throw new global::System.ArgumentException($"Requested value '{name}' was not found.");

        /// <summary>
        /// Converts the string representation of the name or numeric value of
        /// an <see cref="global::System.ConsoleColor" /> to the equivalent instance.
        /// The return value indicates whether the conversion succeeded.
        /// </summary>
        /// <param name="name">The case-sensitive string representation of the enumeration name or underlying value to convert</param>
        /// <param name="value">When this method returns, contains an object of type 
        /// <see cref="global::System.ConsoleColor" /> whose
        /// value is represented by <paramref name="value"/> if the parse operation succeeds.
        /// If the parse operation fails, contains the default value of the underlying type
        /// of <see cref="global::System.ConsoleColor" />. This parameter is passed uninitialized.</param>
        /// <returns><c>true</c> if the value parameter was converted successfully; otherwise, <c>false</c>.</returns>
        public static bool TryParse(
#if NETCOREAPP3_0_OR_GREATER
            [global::System.Diagnostics.CodeAnalysis.NotNullWhen(true)]
#endif
            string? name, 
            out global::System.ConsoleColor value)
            => TryParse(name, out value, false, false);

        /// <summary>
        /// Converts the string representation of the name or numeric value of
        /// an <see cref="global::System.ConsoleColor" /> to the equivalent instance.
        /// The return value indicates whether the conversion succeeded.
        /// </summary>
        /// <param name="name">The string representation of the enumeration name or underlying value to convert</param>
        /// <param name="value">When this method returns, contains an object of type 
        /// <see cref="global::System.ConsoleColor" /> whose
        /// value is represented by <paramref name="value"/> if the parse operation succeeds.
        /// If the parse operation fails, contains the default value of the underlying type
        /// of <see cref="global::System.ConsoleColor" />. This parameter is passed uninitialized.</param>
        /// <param name="ignoreCase"><c>true</c> to read value in case insensitive mode; <c>false</c> to read value in case sensitive mode.</param>
        /// <returns><c>true</c> if the value parameter was converted successfully; otherwise, <c>false</c>.</returns>
        public static bool TryParse(
#if NETCOREAPP3_0_OR_GREATER
            [global::System.Diagnostics.CodeAnalysis.NotNullWhen(true)]
#endif
            string? name, 
            out global::System.ConsoleColor value,
            bool ignoreCase) 
            => TryParse(name, out value, ignoreCase, false);

        /// <summary>
        /// Converts the string representation of the name or numeric value of
        /// an <see cref="global::System.ConsoleColor" /> to the equivalent instance.
        /// The return value indicates whether the conversion succeeded.
        /// </summary>
        /// <param name="name">The string representation of the enumeration name or underlying value to convert</param>
        /// <param name="value">When this method returns, contains an object of type 
        /// <see cref="global::System.ConsoleColor" /> whose
        /// value is represented by <paramref name="value"/> if the parse operation succeeds.
        /// If the parse operation fails, contains the default value of the underlying type
        /// of <see cref="global::System.ConsoleColor" />. This parameter is passed uninitialized.</param>
        /// <param name="ignoreCase"><c>true</c> to read value in case insensitive mode; <c>false</c> to read value in case sensitive mode.</param>
        /// <param name="allowMatchingMetadataAttribute">If <c>true</c>, considers the value included in metadata attributes such as
        /// <c>[Display]</c> attribute when parsing, otherwise only considers the member names.</param>
        /// <returns><c>true</c> if the value parameter was converted successfully; otherwise, <c>false</c>.</returns>
        public static bool TryParse(
#if NETCOREAPP3_0_OR_GREATER
            [global::System.Diagnostics.CodeAnalysis.NotNullWhen(true)]
#endif
            string? name, 
            out global::System.ConsoleColor value, 
            bool ignoreCase,
            bool allowMatchingMetadataAttribute)
                => ignoreCase
                    ? TryParseIgnoreCase(name, out value, allowMatchingMetadataAttribute)
                    : TryParseWithCase(name, out value, allowMatchingMetadataAttribute);

        private static bool TryParseIgnoreCase(
#if NETCOREAPP3_0_OR_GREATER
            [global::System.Diagnostics.CodeAnalysis.NotNullWhen(true)]
#endif
            string? name,
            out global::System.ConsoleColor value,
            bool allowMatchingMetadataAttribute)
        {

            switch (name)
            {
                case string s when s.Equals(nameof(global::System.ConsoleColor.Black), global::System.StringComparison.OrdinalIgnoreCase):
                    value = global::System.ConsoleColor.Black;
                    return true;
                case string s when s.Equals(nameof(global::System.ConsoleColor.DarkBlue), global::System.StringComparison.OrdinalIgnoreCase):
                    value = global::System.ConsoleColor.DarkBlue;
                    return true;
                case string s when s.Equals(nameof(global::System.ConsoleColor.DarkGreen), global::System.StringComparison.OrdinalIgnoreCase):
                    value = global::System.ConsoleColor.DarkGreen;
                    return true;
                case string s when s.Equals(nameof(global::System.ConsoleColor.DarkCyan), global::System.StringComparison.OrdinalIgnoreCase):
                    value = global::System.ConsoleColor.DarkCyan;
                    return true;
                case string s when s.Equals(nameof(global::System.ConsoleColor.DarkRed), global::System.StringComparison.OrdinalIgnoreCase):
                    value = global::System.ConsoleColor.DarkRed;
                    return true;
                case string s when s.Equals(nameof(global::System.ConsoleColor.DarkMagenta), global::System.StringComparison.OrdinalIgnoreCase):
                    value = global::System.ConsoleColor.DarkMagenta;
                    return true;
                case string s when s.Equals(nameof(global::System.ConsoleColor.DarkYellow), global::System.StringComparison.OrdinalIgnoreCase):
                    value = global::System.ConsoleColor.DarkYellow;
                    return true;
                case string s when s.Equals(nameof(global::System.ConsoleColor.Gray), global::System.StringComparison.OrdinalIgnoreCase):
                    value = global::System.ConsoleColor.Gray;
                    return true;
                case string s when s.Equals(nameof(global::System.ConsoleColor.DarkGray), global::System.StringComparison.OrdinalIgnoreCase):
                    value = global::System.ConsoleColor.DarkGray;
                    return true;
                case string s when s.Equals(nameof(global::System.ConsoleColor.Blue), global::System.StringComparison.OrdinalIgnoreCase):
                    value = global::System.ConsoleColor.Blue;
                    return true;
                case string s when s.Equals(nameof(global::System.ConsoleColor.Green), global::System.StringComparison.OrdinalIgnoreCase):
                    value = global::System.ConsoleColor.Green;
                    return true;
                case string s when s.Equals(nameof(global::System.ConsoleColor.Cyan), global::System.StringComparison.OrdinalIgnoreCase):
                    value = global::System.ConsoleColor.Cyan;
                    return true;
                case string s when s.Equals(nameof(global::System.ConsoleColor.Red), global::System.StringComparison.OrdinalIgnoreCase):
                    value = global::System.ConsoleColor.Red;
                    return true;
                case string s when s.Equals(nameof(global::System.ConsoleColor.Magenta), global::System.StringComparison.OrdinalIgnoreCase):
                    value = global::System.ConsoleColor.Magenta;
                    return true;
                case string s when s.Equals(nameof(global::System.ConsoleColor.Yellow), global::System.StringComparison.OrdinalIgnoreCase):
                    value = global::System.ConsoleColor.Yellow;
                    return true;
                case string s when s.Equals(nameof(global::System.ConsoleColor.White), global::System.StringComparison.OrdinalIgnoreCase):
                    value = global::System.ConsoleColor.White;
                    return true;
                case string s when int.TryParse(name, out var val):
                    value = (global::System.ConsoleColor)val;
                    return true;
                default:
                    value = default;
                    return false;
            }
        }

        private static bool TryParseWithCase(
#if NETCOREAPP3_0_OR_GREATER
            [global::System.Diagnostics.CodeAnalysis.NotNullWhen(true)]
#endif
            string? name,
            out global::System.ConsoleColor value,
            bool allowMatchingMetadataAttribute)
        {

            switch (name)
            {
                case nameof(global::System.ConsoleColor.Black):
                    value = global::System.ConsoleColor.Black;
                    return true;
                case nameof(global::System.ConsoleColor.DarkBlue):
                    value = global::System.ConsoleColor.DarkBlue;
                    return true;
                case nameof(global::System.ConsoleColor.DarkGreen):
                    value = global::System.ConsoleColor.DarkGreen;
                    return true;
                case nameof(global::System.ConsoleColor.DarkCyan):
                    value = global::System.ConsoleColor.DarkCyan;
                    return true;
                case nameof(global::System.ConsoleColor.DarkRed):
                    value = global::System.ConsoleColor.DarkRed;
                    return true;
                case nameof(global::System.ConsoleColor.DarkMagenta):
                    value = global::System.ConsoleColor.DarkMagenta;
                    return true;
                case nameof(global::System.ConsoleColor.DarkYellow):
                    value = global::System.ConsoleColor.DarkYellow;
                    return true;
                case nameof(global::System.ConsoleColor.Gray):
                    value = global::System.ConsoleColor.Gray;
                    return true;
                case nameof(global::System.ConsoleColor.DarkGray):
                    value = global::System.ConsoleColor.DarkGray;
                    return true;
                case nameof(global::System.ConsoleColor.Blue):
                    value = global::System.ConsoleColor.Blue;
                    return true;
                case nameof(global::System.ConsoleColor.Green):
                    value = global::System.ConsoleColor.Green;
                    return true;
                case nameof(global::System.ConsoleColor.Cyan):
                    value = global::System.ConsoleColor.Cyan;
                    return true;
                case nameof(global::System.ConsoleColor.Red):
                    value = global::System.ConsoleColor.Red;
                    return true;
                case nameof(global::System.ConsoleColor.Magenta):
                    value = global::System.ConsoleColor.Magenta;
                    return true;
                case nameof(global::System.ConsoleColor.Yellow):
                    value = global::System.ConsoleColor.Yellow;
                    return true;
                case nameof(global::System.ConsoleColor.White):
                    value = global::System.ConsoleColor.White;
                    return true;
                case string s when int.TryParse(name, out var val):
                    value = (global::System.ConsoleColor)val;
                    return true;
                default:
                    value = default;
                    return false;
            }
        }

#if NETCOREAPP && !NETCOREAPP2_0 && !NETCOREAPP1_1 && !NETCOREAPP1_0
        /// <summary>
        /// Converts the string representation of the name or numeric value of
        /// an <see cref="global::System.ConsoleColor" /> to the equivalent instance.
        /// </summary>
        /// <param name="name">The case-sensitive string representation of the enumeration name or underlying value to convert</param>
        /// <returns>An object of type <see cref="global::System.ConsoleColor" /> whose
        /// value is represented by <paramref name="name"/></returns>
        public static global::System.ConsoleColor Parse(
#if NETCOREAPP3_0_OR_GREATER
            [global::System.Diagnostics.CodeAnalysis.NotNullWhen(true)]
#endif
            in ReadOnlySpan<char> name)
                => TryParse(name, out var value, false, false) ? value : ThrowValueNotFound(name.ToString());

        /// <summary>
        /// Converts the string representation of the name or numeric value of
        /// an <see cref="global::System.ConsoleColor" /> to the equivalent instance.
        /// </summary>
        /// <param name="name">The case-sensitive string representation of the enumeration name or underlying value to convert</param>
        /// <param name="ignoreCase"><c>true</c> to read value in case insensitive mode; <c>false</c> to read value in case sensitive mode.</param>
        /// <returns>An object of type <see cref="global::System.ConsoleColor" /> whose
        /// value is represented by <paramref name="name"/></returns>
        public static global::System.ConsoleColor Parse(
#if NETCOREAPP3_0_OR_GREATER
            [global::System.Diagnostics.CodeAnalysis.NotNullWhen(true)]
#endif
            in ReadOnlySpan<char> name,
            bool ignoreCase)
                => TryParse(name, out var value, ignoreCase, false) ? value : ThrowValueNotFound(name.ToString());

        /// <summary>
        /// Converts the string representation of the name or numeric value of
        /// an <see cref="global::System.ConsoleColor" /> to the equivalent instance.
        /// </summary>
        /// <param name="name">The case-sensitive string representation of the enumeration name or underlying value to convert</param>
        /// <param name="ignoreCase"><c>true</c> to read value in case insensitive mode; <c>false</c> to read value in case sensitive mode.</param>
        /// <param name="allowMatchingMetadataAttribute">If <c>true</c>, considers the value included in metadata attributes such as
        /// <c>[Display]</c> attribute when parsing, otherwise only considers the member names.</param>
        /// <returns>An object of type <see cref="global::System.ConsoleColor" /> whose
        /// value is represented by <paramref name="name"/></returns>
        public static global::System.ConsoleColor Parse(
#if NETCOREAPP3_0_OR_GREATER
            [global::System.Diagnostics.CodeAnalysis.NotNullWhen(true)]
#endif
            in ReadOnlySpan<char> name,
            bool ignoreCase,
            bool allowMatchingMetadataAttribute)
                => TryParse(name, out var value, ignoreCase, allowMatchingMetadataAttribute) ? value : ThrowValueNotFound(name.ToString());

        /// <summary>
        /// Converts the span representation of the name or numeric value of
        /// an <see cref="global::System.ConsoleColor" /> to the equivalent instance.
        /// The return value indicates whether the conversion succeeded.
        /// </summary>
        /// <param name="name">The span representation of the enumeration name or underlying value to convert</param>
        /// <param name="value">When this method returns, contains an object of type 
        /// <see cref="global::System.ConsoleColor" /> whose
        /// value is represented by <paramref name="value"/> if the parse operation succeeds.
        /// If the parse operation fails, contains the default value of the underlying type
        /// of <see cref="global::System.ConsoleColor" />. This parameter is passed uninitialized.</param>
        /// <returns><c>true</c> if the value parameter was converted successfully; otherwise, <c>false</c>.</returns>
        public static bool TryParse(
#if NETCOREAPP3_0_OR_GREATER
            [global::System.Diagnostics.CodeAnalysis.NotNullWhen(true)]
#endif
            in ReadOnlySpan<char> name, 
            out global::System.ConsoleColor value)
            => TryParse(name, out value, false, false);

        /// <summary>
        /// Converts the span representation of the name or numeric value of
        /// an <see cref="global::System.ConsoleColor" /> to the equivalent instance.
        /// The return value indicates whether the conversion succeeded.
        /// </summary>
        /// <param name="name">The span representation of the enumeration name or underlying value to convert</param>
        /// <param name="value">When this method returns, contains an object of type 
        /// <see cref="global::System.ConsoleColor" /> whose
        /// value is represented by <paramref name="value"/> if the parse operation succeeds.
        /// If the parse operation fails, contains the default value of the underlying type
        /// of <see cref="global::System.ConsoleColor" />. This parameter is passed uninitialized.</param>
        /// <param name="ignoreCase"><c>true</c> to read value in case insensitive mode; <c>false</c> to read value in case sensitive mode.</param>
        /// <returns><c>true</c> if the value parameter was converted successfully; otherwise, <c>false</c>.</returns>
        public static bool TryParse(
#if NETCOREAPP3_0_OR_GREATER
            [global::System.Diagnostics.CodeAnalysis.NotNullWhen(true)]
#endif
            in ReadOnlySpan<char> name,
            out global::System.ConsoleColor value,
            bool ignoreCase)
            => TryParse(name, out value, ignoreCase, false);

        /// <summary>
        /// Converts the span representation of the name or numeric value of
        /// an <see cref="global::System.ConsoleColor" /> to the equivalent instance.
        /// The return value indicates whether the conversion succeeded.
        /// </summary>
        /// <param name="name">The span representation of the enumeration name or underlying value to convert</param>
        /// <param name="result">When this method returns, contains an object of type 
        /// <see cref="global::System.ConsoleColor" /> whose
        /// value is represented by <paramref name="result"/> if the parse operation succeeds.
        /// If the parse operation fails, contains the default value of the underlying type
        /// of <see cref="global::System.ConsoleColor" />. This parameter is passed uninitialized.</param>
        /// <param name="ignoreCase"><c>true</c> to read value in case insensitive mode; <c>false</c> to read value in case sensitive mode.</param>
        /// <param name="allowMatchingMetadataAttribute">If <c>true</c>, considers the value included in metadata attributes such as
        /// <c>[Display]</c> attribute when parsing, otherwise only considers the member names.</param>
        /// <returns><c>true</c> if the value parameter was converted successfully; otherwise, <c>false</c>.</returns>
        public static bool TryParse(
#if NETCOREAPP3_0_OR_GREATER
            [global::System.Diagnostics.CodeAnalysis.NotNullWhen(true)]
#endif
            in ReadOnlySpan<char> name,
            out global::System.ConsoleColor result,
            bool ignoreCase,
            bool allowMatchingMetadataAttribute)
                => ignoreCase
                    ? TryParseIgnoreCase(in name, out result, allowMatchingMetadataAttribute)
                    : TryParseWithCase(in name, out result, allowMatchingMetadataAttribute);

        private static bool TryParseIgnoreCase(
#if NETCOREAPP3_0_OR_GREATER
            [global::System.Diagnostics.CodeAnalysis.NotNullWhen(true)]
#endif
            in ReadOnlySpan<char> name,
            out global::System.ConsoleColor result,
            bool allowMatchingMetadataAttribute)
        {
            switch (name)
            {
                case ReadOnlySpan<char> current when current.Equals(nameof(global::System.ConsoleColor.Black).AsSpan(), global::System.StringComparison.OrdinalIgnoreCase):
                    result = global::System.ConsoleColor.Black;
                    return true;
                case ReadOnlySpan<char> current when current.Equals(nameof(global::System.ConsoleColor.DarkBlue).AsSpan(), global::System.StringComparison.OrdinalIgnoreCase):
                    result = global::System.ConsoleColor.DarkBlue;
                    return true;
                case ReadOnlySpan<char> current when current.Equals(nameof(global::System.ConsoleColor.DarkGreen).AsSpan(), global::System.StringComparison.OrdinalIgnoreCase):
                    result = global::System.ConsoleColor.DarkGreen;
                    return true;
                case ReadOnlySpan<char> current when current.Equals(nameof(global::System.ConsoleColor.DarkCyan).AsSpan(), global::System.StringComparison.OrdinalIgnoreCase):
                    result = global::System.ConsoleColor.DarkCyan;
                    return true;
                case ReadOnlySpan<char> current when current.Equals(nameof(global::System.ConsoleColor.DarkRed).AsSpan(), global::System.StringComparison.OrdinalIgnoreCase):
                    result = global::System.ConsoleColor.DarkRed;
                    return true;
                case ReadOnlySpan<char> current when current.Equals(nameof(global::System.ConsoleColor.DarkMagenta).AsSpan(), global::System.StringComparison.OrdinalIgnoreCase):
                    result = global::System.ConsoleColor.DarkMagenta;
                    return true;
                case ReadOnlySpan<char> current when current.Equals(nameof(global::System.ConsoleColor.DarkYellow).AsSpan(), global::System.StringComparison.OrdinalIgnoreCase):
                    result = global::System.ConsoleColor.DarkYellow;
                    return true;
                case ReadOnlySpan<char> current when current.Equals(nameof(global::System.ConsoleColor.Gray).AsSpan(), global::System.StringComparison.OrdinalIgnoreCase):
                    result = global::System.ConsoleColor.Gray;
                    return true;
                case ReadOnlySpan<char> current when current.Equals(nameof(global::System.ConsoleColor.DarkGray).AsSpan(), global::System.StringComparison.OrdinalIgnoreCase):
                    result = global::System.ConsoleColor.DarkGray;
                    return true;
                case ReadOnlySpan<char> current when current.Equals(nameof(global::System.ConsoleColor.Blue).AsSpan(), global::System.StringComparison.OrdinalIgnoreCase):
                    result = global::System.ConsoleColor.Blue;
                    return true;
                case ReadOnlySpan<char> current when current.Equals(nameof(global::System.ConsoleColor.Green).AsSpan(), global::System.StringComparison.OrdinalIgnoreCase):
                    result = global::System.ConsoleColor.Green;
                    return true;
                case ReadOnlySpan<char> current when current.Equals(nameof(global::System.ConsoleColor.Cyan).AsSpan(), global::System.StringComparison.OrdinalIgnoreCase):
                    result = global::System.ConsoleColor.Cyan;
                    return true;
                case ReadOnlySpan<char> current when current.Equals(nameof(global::System.ConsoleColor.Red).AsSpan(), global::System.StringComparison.OrdinalIgnoreCase):
                    result = global::System.ConsoleColor.Red;
                    return true;
                case ReadOnlySpan<char> current when current.Equals(nameof(global::System.ConsoleColor.Magenta).AsSpan(), global::System.StringComparison.OrdinalIgnoreCase):
                    result = global::System.ConsoleColor.Magenta;
                    return true;
                case ReadOnlySpan<char> current when current.Equals(nameof(global::System.ConsoleColor.Yellow).AsSpan(), global::System.StringComparison.OrdinalIgnoreCase):
                    result = global::System.ConsoleColor.Yellow;
                    return true;
                case ReadOnlySpan<char> current when current.Equals(nameof(global::System.ConsoleColor.White).AsSpan(), global::System.StringComparison.OrdinalIgnoreCase):
                    result = global::System.ConsoleColor.White;
                    return true;
                case ReadOnlySpan<char> current when int.TryParse(name, out var numericResult):
                    result = (global::System.ConsoleColor)numericResult;
                    return true;
                default:
                    result = default;
                    return false;
            }
        }

        private static bool TryParseWithCase(
#if NETCOREAPP3_0_OR_GREATER
            [global::System.Diagnostics.CodeAnalysis.NotNullWhen(true)]
#endif
            in ReadOnlySpan<char> name,
            out global::System.ConsoleColor result,
            bool allowMatchingMetadataAttribute)
        {
            switch (name)
            {
                case ReadOnlySpan<char> current when current.Equals(nameof(global::System.ConsoleColor.Black).AsSpan(), global::System.StringComparison.Ordinal):
                    result = global::System.ConsoleColor.Black;
                    return true;
                case ReadOnlySpan<char> current when current.Equals(nameof(global::System.ConsoleColor.DarkBlue).AsSpan(), global::System.StringComparison.Ordinal):
                    result = global::System.ConsoleColor.DarkBlue;
                    return true;
                case ReadOnlySpan<char> current when current.Equals(nameof(global::System.ConsoleColor.DarkGreen).AsSpan(), global::System.StringComparison.Ordinal):
                    result = global::System.ConsoleColor.DarkGreen;
                    return true;
                case ReadOnlySpan<char> current when current.Equals(nameof(global::System.ConsoleColor.DarkCyan).AsSpan(), global::System.StringComparison.Ordinal):
                    result = global::System.ConsoleColor.DarkCyan;
                    return true;
                case ReadOnlySpan<char> current when current.Equals(nameof(global::System.ConsoleColor.DarkRed).AsSpan(), global::System.StringComparison.Ordinal):
                    result = global::System.ConsoleColor.DarkRed;
                    return true;
                case ReadOnlySpan<char> current when current.Equals(nameof(global::System.ConsoleColor.DarkMagenta).AsSpan(), global::System.StringComparison.Ordinal):
                    result = global::System.ConsoleColor.DarkMagenta;
                    return true;
                case ReadOnlySpan<char> current when current.Equals(nameof(global::System.ConsoleColor.DarkYellow).AsSpan(), global::System.StringComparison.Ordinal):
                    result = global::System.ConsoleColor.DarkYellow;
                    return true;
                case ReadOnlySpan<char> current when current.Equals(nameof(global::System.ConsoleColor.Gray).AsSpan(), global::System.StringComparison.Ordinal):
                    result = global::System.ConsoleColor.Gray;
                    return true;
                case ReadOnlySpan<char> current when current.Equals(nameof(global::System.ConsoleColor.DarkGray).AsSpan(), global::System.StringComparison.Ordinal):
                    result = global::System.ConsoleColor.DarkGray;
                    return true;
                case ReadOnlySpan<char> current when current.Equals(nameof(global::System.ConsoleColor.Blue).AsSpan(), global::System.StringComparison.Ordinal):
                    result = global::System.ConsoleColor.Blue;
                    return true;
                case ReadOnlySpan<char> current when current.Equals(nameof(global::System.ConsoleColor.Green).AsSpan(), global::System.StringComparison.Ordinal):
                    result = global::System.ConsoleColor.Green;
                    return true;
                case ReadOnlySpan<char> current when current.Equals(nameof(global::System.ConsoleColor.Cyan).AsSpan(), global::System.StringComparison.Ordinal):
                    result = global::System.ConsoleColor.Cyan;
                    return true;
                case ReadOnlySpan<char> current when current.Equals(nameof(global::System.ConsoleColor.Red).AsSpan(), global::System.StringComparison.Ordinal):
                    result = global::System.ConsoleColor.Red;
                    return true;
                case ReadOnlySpan<char> current when current.Equals(nameof(global::System.ConsoleColor.Magenta).AsSpan(), global::System.StringComparison.Ordinal):
                    result = global::System.ConsoleColor.Magenta;
                    return true;
                case ReadOnlySpan<char> current when current.Equals(nameof(global::System.ConsoleColor.Yellow).AsSpan(), global::System.StringComparison.Ordinal):
                    result = global::System.ConsoleColor.Yellow;
                    return true;
                case ReadOnlySpan<char> current when current.Equals(nameof(global::System.ConsoleColor.White).AsSpan(), global::System.StringComparison.Ordinal):
                    result = global::System.ConsoleColor.White;
                    return true;
                case ReadOnlySpan<char> current when int.TryParse(name, out var numericResult):
                    result = (global::System.ConsoleColor)numericResult;
                    return true;
                default:
                    result = default;
                    return false;
            }
        }
#endif

        /// <summary>
        /// Retrieves an array of the values of the members defined in
        /// <see cref="global::System.ConsoleColor" />.
        /// Note that this returns a new array with every invocation, so
        /// should be cached if appropriate.
        /// </summary>
        /// <returns>An array of the values defined in <see cref="global::System.ConsoleColor" /></returns>
        public static global::System.ConsoleColor[] GetValues()
        {
            return new[]
            {
                global::System.ConsoleColor.Black,
                global::System.ConsoleColor.DarkBlue,
                global::System.ConsoleColor.DarkGreen,
                global::System.ConsoleColor.DarkCyan,
                global::System.ConsoleColor.DarkRed,
                global::System.ConsoleColor.DarkMagenta,
                global::System.ConsoleColor.DarkYellow,
                global::System.ConsoleColor.Gray,
                global::System.ConsoleColor.DarkGray,
                global::System.ConsoleColor.Blue,
                global::System.ConsoleColor.Green,
                global::System.ConsoleColor.Cyan,
                global::System.ConsoleColor.Red,
                global::System.ConsoleColor.Magenta,
                global::System.ConsoleColor.Yellow,
                global::System.ConsoleColor.White,
            };
        }

        /// <summary>
        /// Retrieves an array of the names of the members defined in
        /// <see cref="global::System.ConsoleColor" />.
        /// Note that this returns a new array with every invocation, so
        /// should be cached if appropriate.
        /// </summary>
        /// <returns>An array of the names of the members defined in <see cref="global::System.ConsoleColor" /></returns>
        public static string[] GetNames()
        {
            return new[]
            {
                nameof(global::System.ConsoleColor.Black),
                nameof(global::System.ConsoleColor.DarkBlue),
                nameof(global::System.ConsoleColor.DarkGreen),
                nameof(global::System.ConsoleColor.DarkCyan),
                nameof(global::System.ConsoleColor.DarkRed),
                nameof(global::System.ConsoleColor.DarkMagenta),
                nameof(global::System.ConsoleColor.DarkYellow),
                nameof(global::System.ConsoleColor.Gray),
                nameof(global::System.ConsoleColor.DarkGray),
                nameof(global::System.ConsoleColor.Blue),
                nameof(global::System.ConsoleColor.Green),
                nameof(global::System.ConsoleColor.Cyan),
                nameof(global::System.ConsoleColor.Red),
                nameof(global::System.ConsoleColor.Magenta),
                nameof(global::System.ConsoleColor.Yellow),
                nameof(global::System.ConsoleColor.White),
            };
        }
    }
#pragma warning restore CS0612 // Ignore usages of obsolete members or enums
#pragma warning restore CS0618 // Ignore usages of obsolete members or enums
}
  
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the NetEscapades.EnumGenerators source generator
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#nullable enable
#if NETCOREAPP && !NETCOREAPP2_0 && !NETCOREAPP1_1 && !NETCOREAPP1_0
using System;
#endif

namespace System
{
#pragma warning disable CS0612 // Ignore usages of obsolete members or enums
#pragma warning disable CS0618 // Ignore usages of obsolete members or enums
    /// <summary>
    /// Extension methods for <see cref="global::System.DateTimeKind" />
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NetEscapades.EnumGenerators", "FIXED_VERSION")]
    public static partial class DateTimeKindExtensions
    {
        /// <summary>
        /// The number of members in the enum.
        /// This is a non-distinct count of defined names.
        /// </summary>
        public const int Length = 3;

        /// <summary>
        /// Returns the string representation of the <see cref="global::System.DateTimeKind"/> value.
        /// If the attribute is decorated with a <c>[Display]</c> or <c>[Description]</c>attribute, then
        /// uses the provided value. Otherwise uses the name of the member, equivalent to
        /// calling <c>ToString()</c> on <paramref name="value"/>.
        /// </summary>
        /// <param name="value">The value to retrieve the string value for</param>
        /// <param name="useMetadataAttributes">If <c>true</c> uses the value provided in the
        /// <c>[Display]</c> or <c>[Description]</c>attribute as the string representation of the member.
        /// If <c>false</c>, always uses the name of the member, the same as if <c>ToString()</c> was called.</param>
        /// <returns>The string representation of the value</returns>
        public static string ToStringFast(this global::System.DateTimeKind value, bool useMetadataAttributes)
            => useMetadataAttributes ? value.ToStringFastWithMetadata() : value.ToStringFast();

        /// <summary>
        /// Returns the string representation of the <see cref="global::System.DateTimeKind"/> value.
        /// Directly equivalent to calling <c>ToString()</c> on <paramref name="value"/>.
        /// </summary>
        /// <param name="value">The value to retrieve the string value for</param>
        /// <returns>The string representation of the value, the same as that returned by <c>ToString()</c></returns>
        public static string ToStringFast(this global::System.DateTimeKind value)
            => value switch
            {
                global::System.DateTimeKind.Unspecified => nameof(global::System.DateTimeKind.Unspecified),
                global::System.DateTimeKind.Utc => nameof(global::System.DateTimeKind.Utc),
                global::System.DateTimeKind.Local => nameof(global::System.DateTimeKind.Local),
                _ => value.ToString(),
            };

        private static string ToStringFastWithMetadata(this global::System.DateTimeKind value)
            => value.ToStringFast();

        /// <summary>
        /// Returns a boolean telling whether the given enum value exists in the enumeration.
        /// </summary>
        /// <param name="value">The value to check if it's defined</param>
        /// <returns><c>true</c> if the value exists in the enumeration, <c>false</c> otherwise</returns>
        public static bool IsDefined(global::System.DateTimeKind value)
            => value switch
            {
                global::System.DateTimeKind.Unspecified => true,
                global::System.DateTimeKind.Utc => true,
                global::System.DateTimeKind.Local => true,
                _ => false,
            };

        /// <summary>
        /// Returns a boolean telling whether an enum with the given name exists in the enumeration.
        /// </summary>
        /// <param name="name">The name to check if it's defined</param>
        /// <returns><c>true</c> if a member with the name exists in the enumeration, <c>false</c> otherwise</returns>
        public static bool IsDefined(string name) => IsDefined(name, allowMatchingMetadataAttribute: false);

        /// <summary>
        /// Returns a boolean telling whether an enum with the given name exists in the enumeration,
        /// or if a member decorated with a <c>[Display]</c> attribute
        /// with the required name exists.
        /// </summary>
        /// <param name="name">The name to check if it's defined</param>
        /// <param name="allowMatchingMetadataAttribute">If <c>true</c>, considers the value of metadata attributes,otherwise ignores them</param>
        /// <returns><c>true</c> if a member with the name exists in the enumeration, or a member is decorated
        /// with a <c>[Display]</c> attribute with the name, <c>false</c> otherwise</returns>
        public static bool IsDefined(string name, bool allowMatchingMetadataAttribute)
        {
            return name switch
            {
                nameof(global::System.DateTimeKind.Unspecified) => true,
                nameof(global::System.DateTimeKind.Utc) => true,
                nameof(global::System.DateTimeKind.Local) => true,
                _ => false,
            };
        }

#if NETCOREAPP && !NETCOREAPP2_0 && !NETCOREAPP1_1 && !NETCOREAPP1_0
        /// <summary>
        /// Returns a boolean telling whether an enum with the given name exists in the enumeration
        /// </summary>
        /// <param name="name">The name to check if it's defined</param>
        /// <returns><c>true</c> if a member with the name exists in the enumeration, <c>false</c> otherwise</returns>
        public static bool IsDefined(in ReadOnlySpan<char> name) => IsDefined(name, allowMatchingMetadataAttribute: false);

        /// <summary>
        /// Returns a boolean telling whether an enum with the given name exists in the enumeration,
        /// or optionally if a member decorated with a <c>[Display]</c> attribute
        /// with the required name exists.
        /// Slower then the <see cref="IsDefined(string, bool)" /> overload, but doesn't allocate memory./>
        /// </summary>
        /// <param name="name">The name to check if it's defined</param>
        /// <param name="allowMatchingMetadataAttribute">If <c>true</c>, considers the value of metadata attributes,otherwise ignores them</param>
        /// <returns><c>true</c> if a member with the name exists in the enumeration, or a member is decorated
        /// with a <c>[Display]</c> attribute with the name, <c>false</c> otherwise</returns>
        public static bool IsDefined(in ReadOnlySpan<char> name, bool allowMatchingMetadataAttribute)
        {
            return name switch
            {
                ReadOnlySpan<char> current when current.Equals(nameof(global::System.DateTimeKind.Unspecified).AsSpan(), global::System.StringComparison.Ordinal) => true,
                ReadOnlySpan<char> current when current.Equals(nameof(global::System.DateTimeKind.Utc).AsSpan(), global::System.StringComparison.Ordinal) => true,
                ReadOnlySpan<char> current when current.Equals(nameof(global::System.DateTimeKind.Local).AsSpan(), global::System.StringComparison.Ordinal) => true,
                _ => false,
            };
        }
#endif

        /// <summary>
        /// Converts the string representation of the name or numeric value of
        /// an <see cref="global::System.DateTimeKind" /> to the equivalent instance.
        /// </summary>
        /// <param name="name">The case-sensitive string representation of the enumeration name or underlying value to convert</param>
        /// <returns>An object of type <see cref="global::System.DateTimeKind" /> whose
        /// value is represented by <paramref name="name"/></returns>
        public static global::System.DateTimeKind Parse(
#if NETCOREAPP3_0_OR_GREATER
            [global::System.Diagnostics.CodeAnalysis.NotNullWhen(true)]
#endif
            string? name)
                => TryParse(name, out var value, false, false) ? value : ThrowValueNotFound(name);

        /// <summary>
        /// Converts the string representation of the name or numeric value of
        /// an <see cref="global::System.DateTimeKind" /> to the equivalent instance.
        /// </summary>
        /// <param name="name">The case-sensitive string representation of the enumeration name or underlying value to convert</param>
        /// <param name="ignoreCase"><c>true</c> to read value in case insensitive mode; <c>false</c> to read value in case sensitive mode.</param>
        /// <returns>An object of type <see cref="global::System.DateTimeKind" /> whose
        /// value is represented by <paramref name="name"/></returns>
        public static global::System.DateTimeKind Parse(
#if NETCOREAPP3_0_OR_GREATER
            [global::System.Diagnostics.CodeAnalysis.NotNullWhen(true)]
#endif
            string? name,
            bool ignoreCase)
                => TryParse(name, out var value, ignoreCase, false) ? value : ThrowValueNotFound(name);

        /// <summary>
        /// Converts the string representation of the name or numeric value of
        /// an <see cref="global::System.DateTimeKind" /> to the equivalent instance.
        /// </summary>
        /// <param name="name">The case-sensitive string representation of the enumeration name or underlying value to convert</param>
        /// <param name="ignoreCase"><c>true</c> to read value in case insensitive mode; <c>false</c> to read value in case sensitive mode.</param>
        /// <param name="allowMatchingMetadataAttribute">If <c>true</c>, considers the value included in metadata attributes such as
        /// <c>[Display]</c> attribute when parsing, otherwise only considers the member names.</param>
        /// <returns>An object of type <see cref="global::System.DateTimeKind" /> whose
        /// value is represented by <paramref name="name"/></returns>
        public static global::System.DateTimeKind Parse(
#if NETCOREAPP3_0_OR_GREATER
            [global::System.Diagnostics.CodeAnalysis.NotNullWhen(true)]
#endif
            string? name,
            bool ignoreCase,
            bool allowMatchingMetadataAttribute)
                => TryParse(name, out var value, ignoreCase, allowMatchingMetadataAttribute) ? value : ThrowValueNotFound(name);
    
#if NETCOREAPP3_0_OR_GREATER
        [global::System.Diagnostics.CodeAnalysis.DoesNotReturn]
#endif
        private static global::System.DateTimeKind ThrowValueNotFound(string? name)
            => throw new global::System.ArgumentException($"Requested value '{name}' was not found.");

        /// <summary>
        /// Converts the string representation of the name or numeric value of
        /// an <see cref="global::System.DateTimeKind" /> to the equivalent instance.
        /// The return value indicates whether the conversion succeeded.
        /// </summary>
        /// <param name="name">The case-sensitive string representation of the enumeration name or underlying value to convert</param>
        /// <param name="value">When this method returns, contains an object of type 
        /// <see cref="global::System.DateTimeKind" /> whose
        /// value is represented by <paramref name="value"/> if the parse operation succeeds.
        /// If the parse operation fails, contains the default value of the underlying type
        /// of <see cref="global::System.DateTimeKind" />. This parameter is passed uninitialized.</param>
        /// <returns><c>true</c> if the value parameter was converted successfully; otherwise, <c>false</c>.</returns>
        public static bool TryParse(
#if NETCOREAPP3_0_OR_GREATER
            [global::System.Diagnostics.CodeAnalysis.NotNullWhen(true)]
#endif
            string? name, 
            out global::System.DateTimeKind value)
            => TryParse(name, out value, false, false);

        /// <summary>
        /// Converts the string representation of the name or numeric value of
        /// an <see cref="global::System.DateTimeKind" /> to the equivalent instance.
        /// The return value indicates whether the conversion succeeded.
        /// </summary>
        /// <param name="name">The string representation of the enumeration name or underlying value to convert</param>
        /// <param name="value">When this method returns, contains an object of type 
        /// <see cref="global::System.DateTimeKind" /> whose
        /// value is represented by <paramref name="value"/> if the parse operation succeeds.
        /// If the parse operation fails, contains the default value of the underlying type
        /// of <see cref="global::System.DateTimeKind" />. This parameter is passed uninitialized.</param>
        /// <param name="ignoreCase"><c>true</c> to read value in case insensitive mode; <c>false</c> to read value in case sensitive mode.</param>
        /// <returns><c>true</c> if the value parameter was converted successfully; otherwise, <c>false</c>.</returns>
        public static bool TryParse(
#if NETCOREAPP3_0_OR_GREATER
            [global::System.Diagnostics.CodeAnalysis.NotNullWhen(true)]
#endif
            string? name, 
            out global::System.DateTimeKind value,
            bool ignoreCase) 
            => TryParse(name, out value, ignoreCase, false);

        /// <summary>
        /// Converts the string representation of the name or numeric value of
        /// an <see cref="global::System.DateTimeKind" /> to the equivalent instance.
        /// The return value indicates whether the conversion succeeded.
        /// </summary>
        /// <param name="name">The string representation of the enumeration name or underlying value to convert</param>
        /// <param name="value">When this method returns, contains an object of type 
        /// <see cref="global::System.DateTimeKind" /> whose
        /// value is represented by <paramref name="value"/> if the parse operation succeeds.
        /// If the parse operation fails, contains the default value of the underlying type
        /// of <see cref="global::System.DateTimeKind" />. This parameter is passed uninitialized.</param>
        /// <param name="ignoreCase"><c>true</c> to read value in case insensitive mode; <c>false</c> to read value in case sensitive mode.</param>
        /// <param name="allowMatchingMetadataAttribute">If <c>true</c>, considers the value included in metadata attributes such as
        /// <c>[Display]</c> attribute when parsing, otherwise only considers the member names.</param>
        /// <returns><c>true</c> if the value parameter was converted successfully; otherwise, <c>false</c>.</returns>
        public static bool TryParse(
#if NETCOREAPP3_0_OR_GREATER
            [global::System.Diagnostics.CodeAnalysis.NotNullWhen(true)]
#endif
            string? name, 
            out global::System.DateTimeKind value, 
            bool ignoreCase,
            bool allowMatchingMetadataAttribute)
                => ignoreCase
                    ? TryParseIgnoreCase(name, out value, allowMatchingMetadataAttribute)
                    : TryParseWithCase(name, out value, allowMatchingMetadataAttribute);

        private static bool TryParseIgnoreCase(
#if NETCOREAPP3_0_OR_GREATER
            [global::System.Diagnostics.CodeAnalysis.NotNullWhen(true)]
#endif
            string? name,
            out global::System.DateTimeKind value,
            bool allowMatchingMetadataAttribute)
        {

            switch (name)
            {
                case string s when s.Equals(nameof(global::System.DateTimeKind.Unspecified), global::System.StringComparison.OrdinalIgnoreCase):
                    value = global::System.DateTimeKind.Unspecified;
                    return true;
                case string s when s.Equals(nameof(global::System.DateTimeKind.Utc), global::System.StringComparison.OrdinalIgnoreCase):
                    value = global::System.DateTimeKind.Utc;
                    return true;
                case string s when s.Equals(nameof(global::System.DateTimeKind.Local), global::System.StringComparison.OrdinalIgnoreCase):
                    value = global::System.DateTimeKind.Local;
                    return true;
                case string s when int.TryParse(name, out var val):
                    value = (global::System.DateTimeKind)val;
                    return true;
                default:
                    value = default;
                    return false;
            }
        }

        private static bool TryParseWithCase(
#if NETCOREAPP3_0_OR_GREATER
            [global::System.Diagnostics.CodeAnalysis.NotNullWhen(true)]
#endif
            string? name,
            out global::System.DateTimeKind value,
            bool allowMatchingMetadataAttribute)
        {

            switch (name)
            {
                case nameof(global::System.DateTimeKind.Unspecified):
                    value = global::System.DateTimeKind.Unspecified;
                    return true;
                case nameof(global::System.DateTimeKind.Utc):
                    value = global::System.DateTimeKind.Utc;
                    return true;
                case nameof(global::System.DateTimeKind.Local):
                    value = global::System.DateTimeKind.Local;
                    return true;
                case string s when int.TryParse(name, out var val):
                    value = (global::System.DateTimeKind)val;
                    return true;
                default:
                    value = default;
                    return false;
            }
        }

#if NETCOREAPP && !NETCOREAPP2_0 && !NETCOREAPP1_1 && !NETCOREAPP1_0
        /// <summary>
        /// Converts the string representation of the name or numeric value of
        /// an <see cref="global::System.DateTimeKind" /> to the equivalent instance.
        /// </summary>
        /// <param name="name">The case-sensitive string representation of the enumeration name or underlying value to convert</param>
        /// <returns>An object of type <see cref="global::System.DateTimeKind" /> whose
        /// value is represented by <paramref name="name"/></returns>
        public static global::System.DateTimeKind Parse(
#if NETCOREAPP3_0_OR_GREATER
            [global::System.Diagnostics.CodeAnalysis.NotNullWhen(true)]
#endif
            in ReadOnlySpan<char> name)
                => TryParse(name, out var value, false, false) ? value : ThrowValueNotFound(name.ToString());

        /// <summary>
        /// Converts the string representation of the name or numeric value of
        /// an <see cref="global::System.DateTimeKind" /> to the equivalent instance.
        /// </summary>
        /// <param name="name">The case-sensitive string representation of the enumeration name or underlying value to convert</param>
        /// <param name="ignoreCase"><c>true</c> to read value in case insensitive mode; <c>false</c> to read value in case sensitive mode.</param>
        /// <returns>An object of type <see cref="global::System.DateTimeKind" /> whose
        /// value is represented by <paramref name="name"/></returns>
        public static global::System.DateTimeKind Parse(
#if NETCOREAPP3_0_OR_GREATER
            [global::System.Diagnostics.CodeAnalysis.NotNullWhen(true)]
#endif
            in ReadOnlySpan<char> name,
            bool ignoreCase)
                => TryParse(name, out var value, ignoreCase, false) ? value : ThrowValueNotFound(name.ToString());

        /// <summary>
        /// Converts the string representation of the name or numeric value of
        /// an <see cref="global::System.DateTimeKind" /> to the equivalent instance.
        /// </summary>
        /// <param name="name">The case-sensitive string representation of the enumeration name or underlying value to convert</param>
        /// <param name="ignoreCase"><c>true</c> to read value in case insensitive mode; <c>false</c> to read value in case sensitive mode.</param>
        /// <param name="allowMatchingMetadataAttribute">If <c>true</c>, considers the value included in metadata attributes such as
        /// <c>[Display]</c> attribute when parsing, otherwise only considers the member names.</param>
        /// <returns>An object of type <see cref="global::System.DateTimeKind" /> whose
        /// value is represented by <paramref name="name"/></returns>
        public static global::System.DateTimeKind Parse(
#if NETCOREAPP3_0_OR_GREATER
            [global::System.Diagnostics.CodeAnalysis.NotNullWhen(true)]
#endif
            in ReadOnlySpan<char> name,
            bool ignoreCase,
            bool allowMatchingMetadataAttribute)
                => TryParse(name, out var value, ignoreCase, allowMatchingMetadataAttribute) ? value : ThrowValueNotFound(name.ToString());

        /// <summary>
        /// Converts the span representation of the name or numeric value of
        /// an <see cref="global::System.DateTimeKind" /> to the equivalent instance.
        /// The return value indicates whether the conversion succeeded.
        /// </summary>
        /// <param name="name">The span representation of the enumeration name or underlying value to convert</param>
        /// <param name="value">When this method returns, contains an object of type 
        /// <see cref="global::System.DateTimeKind" /> whose
        /// value is represented by <paramref name="value"/> if the parse operation succeeds.
        /// If the parse operation fails, contains the default value of the underlying type
        /// of <see cref="global::System.DateTimeKind" />. This parameter is passed uninitialized.</param>
        /// <returns><c>true</c> if the value parameter was converted successfully; otherwise, <c>false</c>.</returns>
        public static bool TryParse(
#if NETCOREAPP3_0_OR_GREATER
            [global::System.Diagnostics.CodeAnalysis.NotNullWhen(true)]
#endif
            in ReadOnlySpan<char> name, 
            out global::System.DateTimeKind value)
            => TryParse(name, out value, false, false);

        /// <summary>
        /// Converts the span representation of the name or numeric value of
        /// an <see cref="global::System.DateTimeKind" /> to the equivalent instance.
        /// The return value indicates whether the conversion succeeded.
        /// </summary>
        /// <param name="name">The span representation of the enumeration name or underlying value to convert</param>
        /// <param name="value">When this method returns, contains an object of type 
        /// <see cref="global::System.DateTimeKind" /> whose
        /// value is represented by <paramref name="value"/> if the parse operation succeeds.
        /// If the parse operation fails, contains the default value of the underlying type
        /// of <see cref="global::System.DateTimeKind" />. This parameter is passed uninitialized.</param>
        /// <param name="ignoreCase"><c>true</c> to read value in case insensitive mode; <c>false</c> to read value in case sensitive mode.</param>
        /// <returns><c>true</c> if the value parameter was converted successfully; otherwise, <c>false</c>.</returns>
        public static bool TryParse(
#if NETCOREAPP3_0_OR_GREATER
            [global::System.Diagnostics.CodeAnalysis.NotNullWhen(true)]
#endif
            in ReadOnlySpan<char> name,
            out global::System.DateTimeKind value,
            bool ignoreCase)
            => TryParse(name, out value, ignoreCase, false);

        /// <summary>
        /// Converts the span representation of the name or numeric value of
        /// an <see cref="global::System.DateTimeKind" /> to the equivalent instance.
        /// The return value indicates whether the conversion succeeded.
        /// </summary>
        /// <param name="name">The span representation of the enumeration name or underlying value to convert</param>
        /// <param name="result">When this method returns, contains an object of type 
        /// <see cref="global::System.DateTimeKind" /> whose
        /// value is represented by <paramref name="result"/> if the parse operation succeeds.
        /// If the parse operation fails, contains the default value of the underlying type
        /// of <see cref="global::System.DateTimeKind" />. This parameter is passed uninitialized.</param>
        /// <param name="ignoreCase"><c>true</c> to read value in case insensitive mode; <c>false</c> to read value in case sensitive mode.</param>
        /// <param name="allowMatchingMetadataAttribute">If <c>true</c>, considers the value included in metadata attributes such as
        /// <c>[Display]</c> attribute when parsing, otherwise only considers the member names.</param>
        /// <returns><c>true</c> if the value parameter was converted successfully; otherwise, <c>false</c>.</returns>
        public static bool TryParse(
#if NETCOREAPP3_0_OR_GREATER
            [global::System.Diagnostics.CodeAnalysis.NotNullWhen(true)]
#endif
            in ReadOnlySpan<char> name,
            out global::System.DateTimeKind result,
            bool ignoreCase,
            bool allowMatchingMetadataAttribute)
                => ignoreCase
                    ? TryParseIgnoreCase(in name, out result, allowMatchingMetadataAttribute)
                    : TryParseWithCase(in name, out result, allowMatchingMetadataAttribute);

        private static bool TryParseIgnoreCase(
#if NETCOREAPP3_0_OR_GREATER
            [global::System.Diagnostics.CodeAnalysis.NotNullWhen(true)]
#endif
            in ReadOnlySpan<char> name,
            out global::System.DateTimeKind result,
            bool allowMatchingMetadataAttribute)
        {
            switch (name)
            {
                case ReadOnlySpan<char> current when current.Equals(nameof(global::System.DateTimeKind.Unspecified).AsSpan(), global::System.StringComparison.OrdinalIgnoreCase):
                    result = global::System.DateTimeKind.Unspecified;
                    return true;
                case ReadOnlySpan<char> current when current.Equals(nameof(global::System.DateTimeKind.Utc).AsSpan(), global::System.StringComparison.OrdinalIgnoreCase):
                    result = global::System.DateTimeKind.Utc;
                    return true;
                case ReadOnlySpan<char> current when current.Equals(nameof(global::System.DateTimeKind.Local).AsSpan(), global::System.StringComparison.OrdinalIgnoreCase):
                    result = global::System.DateTimeKind.Local;
                    return true;
                case ReadOnlySpan<char> current when int.TryParse(name, out var numericResult):
                    result = (global::System.DateTimeKind)numericResult;
                    return true;
                default:
                    result = default;
                    return false;
            }
        }

        private static bool TryParseWithCase(
#if NETCOREAPP3_0_OR_GREATER
            [global::System.Diagnostics.CodeAnalysis.NotNullWhen(true)]
#endif
            in ReadOnlySpan<char> name,
            out global::System.DateTimeKind result,
            bool allowMatchingMetadataAttribute)
        {
            switch (name)
            {
                case ReadOnlySpan<char> current when current.Equals(nameof(global::System.DateTimeKind.Unspecified).AsSpan(), global::System.StringComparison.Ordinal):
                    result = global::System.DateTimeKind.Unspecified;
                    return true;
                case ReadOnlySpan<char> current when current.Equals(nameof(global::System.DateTimeKind.Utc).AsSpan(), global::System.StringComparison.Ordinal):
                    result = global::System.DateTimeKind.Utc;
                    return true;
                case ReadOnlySpan<char> current when current.Equals(nameof(global::System.DateTimeKind.Local).AsSpan(), global::System.StringComparison.Ordinal):
                    result = global::System.DateTimeKind.Local;
                    return true;
                case ReadOnlySpan<char> current when int.TryParse(name, out var numericResult):
                    result = (global::System.DateTimeKind)numericResult;
                    return true;
                default:
                    result = default;
                    return false;
            }
        }
#endif

        /// <summary>
        /// Retrieves an array of the values of the members defined in
        /// <see cref="global::System.DateTimeKind" />.
        /// Note that this returns a new array with every invocation, so
        /// should be cached if appropriate.
        /// </summary>
        /// <returns>An array of the values defined in <see cref="global::System.DateTimeKind" /></returns>
        public static global::System.DateTimeKind[] GetValues()
        {
            return new[]
            {
                global::System.DateTimeKind.Unspecified,
                global::System.DateTimeKind.Utc,
                global::System.DateTimeKind.Local,
            };
        }

        /// <summary>
        /// Retrieves an array of the names of the members defined in
        /// <see cref="global::System.DateTimeKind" />.
        /// Note that this returns a new array with every invocation, so
        /// should be cached if appropriate.
        /// </summary>
        /// <returns>An array of the names of the members defined in <see cref="global::System.DateTimeKind" /></returns>
        public static string[] GetNames()
        {
            return new[]
            {
                nameof(global::System.DateTimeKind.Unspecified),
                nameof(global::System.DateTimeKind.Utc),
                nameof(global::System.DateTimeKind.Local),
            };
        }
    }
#pragma warning restore CS0612 // Ignore usages of obsolete members or enums
#pragma warning restore CS0618 // Ignore usages of obsolete members or enums
}
]