[  
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the NetEscapades.EnumGenerators source generator
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#nullable enable

#if NETESCAPADES_ENUMGENERATORS_EMBED_ATTRIBUTES
namespace NetEscapades.EnumGenerators
{
    /// <summary>
    /// Add to enums to indicate that extension methods should be generated for the type
    /// </summary>
    [global::System.AttributeUsage(global::System.AttributeTargets.Enum)]
    [global::System.Diagnostics.Conditional("NETESCAPADES_ENUMGENERATORS_USAGES")]
#if NET5_0_OR_GREATER
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage(Justification = "Generated by the NetEscapades.EnumGenerators source generator.")]
#else
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
#endif
    public class EnumExtensionsAttribute : global::System.Attribute
    {
        /// <summary>
        /// The namespace to generate the extension class.
        /// If not provided, the namespace of the enum will be used
        /// </summary>
        public string? ExtensionClassNamespace { get; set; }

        /// <summary>
        /// The name to use for the extension class.
        /// If not provided, the enum name with "Extensions" will be used.
        /// For example for an Enum called StatusCodes, the default name
        /// will be StatusCodesExtensions
        /// </summary>
        public string? ExtensionClassName { get; set; }

        /// <summary>
        /// By default, when interceptors are enabled for a project, any
        /// interceptable usages of the enum will be replaced by usages of
        /// the extension method in this project. To disable interception of
        /// the enum in this project, set <see cref="IsInterceptable"/> to <c>false</c>.
        /// </summary>
        public bool IsInterceptable { get; set; } = true;
    }

    
    /// <summary>
    /// Add to enums to indicate that extension methods should be generated for the type
    /// </summary>
    [System.AttributeUsage(System.AttributeTargets.Assembly, AllowMultiple = true)]
    [System.Diagnostics.Conditional("NETESCAPADES_ENUMGENERATORS_USAGES")]
#if NET5_0_OR_GREATER
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage(Justification = "Generated by the NetEscapades.EnumGenerators source generator.")]
#else
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
#endif
    public class EnumExtensionsAttribute<T> : System.Attribute
        where T: System.Enum
    {
        /// <summary>
        /// The namespace to generate the extension class.
        /// If not provided, the namespace of the enum will be used
        /// </summary>
        public string? ExtensionClassNamespace { get; set; }

        /// <summary>
        /// The name to use for the extension class.
        /// If not provided, the enum name with ""Extensions"" will be used.
        /// For example for an Enum called StatusCodes, the default name
        /// will be StatusCodesExtensions
        /// </summary>
        public string? ExtensionClassName { get; set; }

        /// <summary>
        /// By default, when interceptors are enabled for a project, any
        /// interceptable usages of the enum will be replaced by usages of
        /// the extension method in this project. To disable interception of
        /// the enum in this project, set <see cref="IsInterceptable"/> to <c>false</c>.
        /// </summary>
        public bool IsInterceptable { get; set; } = true;
    }
}
#endif

  
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the NetEscapades.EnumGenerators source generator
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#nullable enable

namespace Foo
{
#pragma warning disable CS0612 // Ignore usages of obsolete members or enums
#pragma warning disable CS0618 // Ignore usages of obsolete members or enums
    /// <summary>
    /// Extension methods for <see cref="global::Foo.MyEnum" />
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NetEscapades.EnumGenerators", "FIXED_VERSION")]
    internal static partial class MyEnumExtensions
    {
        /// <summary>
        /// The number of members in the enum.
        /// This is a non-distinct count of defined names.
        /// </summary>
        public const int Length = 3;

        /// <summary>
        /// Returns the string representation of the <see cref="global::Foo.MyEnum"/> value.
        /// If the attribute is decorated with a <c>[Display]</c> or <c>[Description]</c>attribute, then
        /// uses the provided value. Otherwise uses the name of the member, equivalent to
        /// calling <c>ToString()</c> on <paramref name="value"/>.
        /// </summary>
        /// <param name="value">The value to retrieve the string value for</param>
        /// <param name="useMetadataAttributes">If <c>true</c> uses the value provided in the
        /// <c>[Display]</c> or <c>[Description]</c>attribute as the string representation of the member.
        /// If <c>false</c>, always uses the name of the member, the same as if <c>ToString()</c> was called.</param>
        /// <returns>The string representation of the value</returns>
        public static string ToStringFast(this global::Foo.MyEnum value, bool useMetadataAttributes)
            => useMetadataAttributes ? value.ToStringFastWithMetadata() : value.ToStringFast();

        /// <summary>
        /// Returns the string representation of the <see cref="global::Foo.MyEnum"/> value.
        /// Directly equivalent to calling <c>ToString()</c> on <paramref name="value"/>.
        /// </summary>
        /// <param name="value">The value to retrieve the string value for</param>
        /// <returns>The string representation of the value, the same as that returned by <c>ToString()</c></returns>
        public static string ToStringFast(this global::Foo.MyEnum value)
            => value switch
            {
                global::Foo.MyEnum.First => nameof(global::Foo.MyEnum.First),
                global::Foo.MyEnum.Second => nameof(global::Foo.MyEnum.Second),
                global::Foo.MyEnum.Third => nameof(global::Foo.MyEnum.Third),
                _ => value.ToString(),
            };

        private static string ToStringFastWithMetadata(this global::Foo.MyEnum value)
            => value.ToStringFast();

        /// <summary>
        /// Determines whether one or more bit fields are set in the current instance.
        /// Equivalent to calling <see cref="global::System.Enum.HasFlag" /> on <paramref name="value"/>.
        /// </summary>
        /// <param name="value">The value of the instance to investigate</param>
        /// <param name="flag">The flag to check for</param>
        /// <returns><c>true</c> if the fields set in the flag are also set in the current instance; otherwise <c>false</c>.</returns>
        /// <remarks>If the underlying value of <paramref name="flag"/> is zero, the method returns true.
        /// This is consistent with the behaviour of <see cref="global::System.Enum.HasFlag" /></remarks>
        public static bool HasFlagFast(this global::Foo.MyEnum value, global::Foo.MyEnum flag)
            => flag == 0 ? true : (value & flag) == flag;

        /// <summary>
        /// Returns a boolean telling whether the given enum value exists in the enumeration.
        /// </summary>
        /// <param name="value">The value to check if it's defined</param>
        /// <returns><c>true</c> if the value exists in the enumeration, <c>false</c> otherwise</returns>
        public static bool IsDefined(global::Foo.MyEnum value)
            => value switch
            {
                global::Foo.MyEnum.First => true,
                global::Foo.MyEnum.Second => true,
                global::Foo.MyEnum.Third => true,
                _ => false,
            };

        /// <summary>
        /// Returns a boolean telling whether an enum with the given name exists in the enumeration.
        /// </summary>
        /// <param name="name">The name to check if it's defined</param>
        /// <returns><c>true</c> if a member with the name exists in the enumeration, <c>false</c> otherwise</returns>
        public static bool IsDefined(string name) => IsDefined(name, allowMatchingMetadataAttribute: false);

        /// <summary>
        /// Returns a boolean telling whether an enum with the given name exists in the enumeration,
        /// or if a member decorated with a <c>[Display]</c> attribute
        /// with the required name exists.
        /// </summary>
        /// <param name="name">The name to check if it's defined</param>
        /// <param name="allowMatchingMetadataAttribute">If <c>true</c>, considers the value of metadata attributes,otherwise ignores them</param>
        /// <returns><c>true</c> if a member with the name exists in the enumeration, or a member is decorated
        /// with a <c>[Display]</c> attribute with the name, <c>false</c> otherwise</returns>
        public static bool IsDefined(string name, bool allowMatchingMetadataAttribute)
        {
            return name switch
            {
                nameof(global::Foo.MyEnum.First) => true,
                nameof(global::Foo.MyEnum.Second) => true,
                nameof(global::Foo.MyEnum.Third) => true,
                _ => false,
            };
        }

#if NETCOREAPP && !NETCOREAPP2_0 && !NETCOREAPP1_1 && !NETCOREAPP1_0
        /// <summary>
        /// Returns a boolean telling whether an enum with the given name exists in the enumeration
        /// </summary>
        /// <param name="name">The name to check if it's defined</param>
        /// <returns><c>true</c> if a member with the name exists in the enumeration, <c>false</c> otherwise</returns>
        public static bool IsDefined(in global::System.ReadOnlySpan<char> name) => IsDefined(name, allowMatchingMetadataAttribute: false);

        /// <summary>
        /// Returns a boolean telling whether an enum with the given name exists in the enumeration,
        /// or optionally if a member decorated with a <c>[Display]</c> attribute
        /// with the required name exists.
        /// Slower then the <see cref="IsDefined(string, bool)" /> overload, but doesn't allocate memory./>
        /// </summary>
        /// <param name="name">The name to check if it's defined</param>
        /// <param name="allowMatchingMetadataAttribute">If <c>true</c>, considers the value of metadata attributes,otherwise ignores them</param>
        /// <returns><c>true</c> if a member with the name exists in the enumeration, or a member is decorated
        /// with a <c>[Display]</c> attribute with the name, <c>false</c> otherwise</returns>
        public static bool IsDefined(in global::System.ReadOnlySpan<char> name, bool allowMatchingMetadataAttribute)
        {
            return name switch
            {
                global::System.ReadOnlySpan<char> current when global::System.MemoryExtensions.Equals(current, nameof(global::Foo.MyEnum.First), global::System.StringComparison.Ordinal) => true,
                global::System.ReadOnlySpan<char> current when global::System.MemoryExtensions.Equals(current, nameof(global::Foo.MyEnum.Second), global::System.StringComparison.Ordinal) => true,
                global::System.ReadOnlySpan<char> current when global::System.MemoryExtensions.Equals(current, nameof(global::Foo.MyEnum.Third), global::System.StringComparison.Ordinal) => true,
                _ => false,
            };
        }
#endif

        /// <summary>
        /// Converts the string representation of the name or numeric value of
        /// an <see cref="global::Foo.MyEnum" /> to the equivalent instance.
        /// </summary>
        /// <param name="name">The case-sensitive string representation of the enumeration name or underlying value to convert</param>
        /// <returns>An object of type <see cref="global::Foo.MyEnum" /> whose
        /// value is represented by <paramref name="name"/></returns>
        public static global::Foo.MyEnum Parse(
#if NETCOREAPP3_0_OR_GREATER
            [global::System.Diagnostics.CodeAnalysis.NotNullWhen(true)]
#endif
            string? name)
                => TryParse(name, out var value, false, false) ? value : ThrowValueNotFound(name);

        /// <summary>
        /// Converts the string representation of the name or numeric value of
        /// an <see cref="global::Foo.MyEnum" /> to the equivalent instance.
        /// </summary>
        /// <param name="name">The case-sensitive string representation of the enumeration name or underlying value to convert</param>
        /// <param name="ignoreCase"><c>true</c> to read value in case insensitive mode; <c>false</c> to read value in case sensitive mode.</param>
        /// <returns>An object of type <see cref="global::Foo.MyEnum" /> whose
        /// value is represented by <paramref name="name"/></returns>
        public static global::Foo.MyEnum Parse(
#if NETCOREAPP3_0_OR_GREATER
            [global::System.Diagnostics.CodeAnalysis.NotNullWhen(true)]
#endif
            string? name,
            bool ignoreCase)
                => TryParse(name, out var value, ignoreCase, false) ? value : ThrowValueNotFound(name);

        /// <summary>
        /// Converts the string representation of the name or numeric value of
        /// an <see cref="global::Foo.MyEnum" /> to the equivalent instance.
        /// </summary>
        /// <param name="name">The case-sensitive string representation of the enumeration name or underlying value to convert</param>
        /// <param name="ignoreCase"><c>true</c> to read value in case insensitive mode; <c>false</c> to read value in case sensitive mode.</param>
        /// <param name="allowMatchingMetadataAttribute">If <c>true</c>, considers the value included in metadata attributes such as
        /// <c>[Display]</c> attribute when parsing, otherwise only considers the member names.</param>
        /// <returns>An object of type <see cref="global::Foo.MyEnum" /> whose
        /// value is represented by <paramref name="name"/></returns>
        public static global::Foo.MyEnum Parse(
#if NETCOREAPP3_0_OR_GREATER
            [global::System.Diagnostics.CodeAnalysis.NotNullWhen(true)]
#endif
            string? name,
            bool ignoreCase,
            bool allowMatchingMetadataAttribute)
                => TryParse(name, out var value, ignoreCase, allowMatchingMetadataAttribute) ? value : ThrowValueNotFound(name);
    
#if NETCOREAPP3_0_OR_GREATER
        [global::System.Diagnostics.CodeAnalysis.DoesNotReturn]
#endif
        private static global::Foo.MyEnum ThrowValueNotFound(string? name)
            => throw new global::System.ArgumentException($"Requested value '{name}' was not found.");

        /// <summary>
        /// Converts the string representation of the name or numeric value of
        /// an <see cref="global::Foo.MyEnum" /> to the equivalent instance.
        /// The return value indicates whether the conversion succeeded.
        /// </summary>
        /// <param name="name">The case-sensitive string representation of the enumeration name or underlying value to convert</param>
        /// <param name="value">When this method returns, contains an object of type 
        /// <see cref="global::Foo.MyEnum" /> whose
        /// value is represented by <paramref name="value"/> if the parse operation succeeds.
        /// If the parse operation fails, contains the default value of the underlying type
        /// of <see cref="global::Foo.MyEnum" />. This parameter is passed uninitialized.</param>
        /// <returns><c>true</c> if the value parameter was converted successfully; otherwise, <c>false</c>.</returns>
        public static bool TryParse(
#if NETCOREAPP3_0_OR_GREATER
            [global::System.Diagnostics.CodeAnalysis.NotNullWhen(true)]
#endif
            string? name, 
            out global::Foo.MyEnum value)
            => TryParse(name, out value, false, false);

        /// <summary>
        /// Converts the string representation of the name or numeric value of
        /// an <see cref="global::Foo.MyEnum" /> to the equivalent instance.
        /// The return value indicates whether the conversion succeeded.
        /// </summary>
        /// <param name="name">The string representation of the enumeration name or underlying value to convert</param>
        /// <param name="value">When this method returns, contains an object of type 
        /// <see cref="global::Foo.MyEnum" /> whose
        /// value is represented by <paramref name="value"/> if the parse operation succeeds.
        /// If the parse operation fails, contains the default value of the underlying type
        /// of <see cref="global::Foo.MyEnum" />. This parameter is passed uninitialized.</param>
        /// <param name="ignoreCase"><c>true</c> to read value in case insensitive mode; <c>false</c> to read value in case sensitive mode.</param>
        /// <returns><c>true</c> if the value parameter was converted successfully; otherwise, <c>false</c>.</returns>
        public static bool TryParse(
#if NETCOREAPP3_0_OR_GREATER
            [global::System.Diagnostics.CodeAnalysis.NotNullWhen(true)]
#endif
            string? name, 
            out global::Foo.MyEnum value,
            bool ignoreCase) 
            => TryParse(name, out value, ignoreCase, false);

        /// <summary>
        /// Converts the string representation of the name or numeric value of
        /// an <see cref="global::Foo.MyEnum" /> to the equivalent instance.
        /// The return value indicates whether the conversion succeeded.
        /// </summary>
        /// <param name="name">The string representation of the enumeration name or underlying value to convert</param>
        /// <param name="value">When this method returns, contains an object of type 
        /// <see cref="global::Foo.MyEnum" /> whose
        /// value is represented by <paramref name="value"/> if the parse operation succeeds.
        /// If the parse operation fails, contains the default value of the underlying type
        /// of <see cref="global::Foo.MyEnum" />. This parameter is passed uninitialized.</param>
        /// <param name="ignoreCase"><c>true</c> to read value in case insensitive mode; <c>false</c> to read value in case sensitive mode.</param>
        /// <param name="allowMatchingMetadataAttribute">If <c>true</c>, considers the value included in metadata attributes such as
        /// <c>[Display]</c> attribute when parsing, otherwise only considers the member names.</param>
        /// <returns><c>true</c> if the value parameter was converted successfully; otherwise, <c>false</c>.</returns>
        public static bool TryParse(
#if NETCOREAPP3_0_OR_GREATER
            [global::System.Diagnostics.CodeAnalysis.NotNullWhen(true)]
#endif
            string? name, 
            out global::Foo.MyEnum value, 
            bool ignoreCase,
            bool allowMatchingMetadataAttribute)
                => ignoreCase
                    ? TryParseIgnoreCase(name, out value, allowMatchingMetadataAttribute)
                    : TryParseWithCase(name, out value, allowMatchingMetadataAttribute);

        private static bool TryParseIgnoreCase(
#if NETCOREAPP3_0_OR_GREATER
            [global::System.Diagnostics.CodeAnalysis.NotNullWhen(true)]
#endif
            string? name,
            out global::Foo.MyEnum value,
            bool allowMatchingMetadataAttribute)
        {

            switch (name)
            {
                case string s when s.Equals(nameof(global::Foo.MyEnum.First), global::System.StringComparison.OrdinalIgnoreCase):
                    value = global::Foo.MyEnum.First;
                    return true;
                case string s when s.Equals(nameof(global::Foo.MyEnum.Second), global::System.StringComparison.OrdinalIgnoreCase):
                    value = global::Foo.MyEnum.Second;
                    return true;
                case string s when s.Equals(nameof(global::Foo.MyEnum.Third), global::System.StringComparison.OrdinalIgnoreCase):
                    value = global::Foo.MyEnum.Third;
                    return true;
                case string s when int.TryParse(name, out var val):
                    value = (global::Foo.MyEnum)val;
                    return true;
                default:
                    value = default;
                    return false;
            }
        }

        private static bool TryParseWithCase(
#if NETCOREAPP3_0_OR_GREATER
            [global::System.Diagnostics.CodeAnalysis.NotNullWhen(true)]
#endif
            string? name,
            out global::Foo.MyEnum value,
            bool allowMatchingMetadataAttribute)
        {

            switch (name)
            {
                case nameof(global::Foo.MyEnum.First):
                    value = global::Foo.MyEnum.First;
                    return true;
                case nameof(global::Foo.MyEnum.Second):
                    value = global::Foo.MyEnum.Second;
                    return true;
                case nameof(global::Foo.MyEnum.Third):
                    value = global::Foo.MyEnum.Third;
                    return true;
                case string s when int.TryParse(name, out var val):
                    value = (global::Foo.MyEnum)val;
                    return true;
                default:
                    value = default;
                    return false;
            }
        }

#if NETCOREAPP && !NETCOREAPP2_0 && !NETCOREAPP1_1 && !NETCOREAPP1_0
        /// <summary>
        /// Converts the string representation of the name or numeric value of
        /// an <see cref="global::Foo.MyEnum" /> to the equivalent instance.
        /// </summary>
        /// <param name="name">The case-sensitive string representation of the enumeration name or underlying value to convert</param>
        /// <returns>An object of type <see cref="global::Foo.MyEnum" /> whose
        /// value is represented by <paramref name="name"/></returns>
        public static global::Foo.MyEnum Parse(
#if NETCOREAPP3_0_OR_GREATER
            [global::System.Diagnostics.CodeAnalysis.NotNullWhen(true)]
#endif
            in global::System.ReadOnlySpan<char> name)
                => TryParse(name, out var value, false, false) ? value : ThrowValueNotFound(name.ToString());

        /// <summary>
        /// Converts the string representation of the name or numeric value of
        /// an <see cref="global::Foo.MyEnum" /> to the equivalent instance.
        /// </summary>
        /// <param name="name">The case-sensitive string representation of the enumeration name or underlying value to convert</param>
        /// <param name="ignoreCase"><c>true</c> to read value in case insensitive mode; <c>false</c> to read value in case sensitive mode.</param>
        /// <returns>An object of type <see cref="global::Foo.MyEnum" /> whose
        /// value is represented by <paramref name="name"/></returns>
        public static global::Foo.MyEnum Parse(
#if NETCOREAPP3_0_OR_GREATER
            [global::System.Diagnostics.CodeAnalysis.NotNullWhen(true)]
#endif
            in global::System.ReadOnlySpan<char> name,
            bool ignoreCase)
                => TryParse(name, out var value, ignoreCase, false) ? value : ThrowValueNotFound(name.ToString());

        /// <summary>
        /// Converts the string representation of the name or numeric value of
        /// an <see cref="global::Foo.MyEnum" /> to the equivalent instance.
        /// </summary>
        /// <param name="name">The case-sensitive string representation of the enumeration name or underlying value to convert</param>
        /// <param name="ignoreCase"><c>true</c> to read value in case insensitive mode; <c>false</c> to read value in case sensitive mode.</param>
        /// <param name="allowMatchingMetadataAttribute">If <c>true</c>, considers the value included in metadata attributes such as
        /// <c>[Display]</c> attribute when parsing, otherwise only considers the member names.</param>
        /// <returns>An object of type <see cref="global::Foo.MyEnum" /> whose
        /// value is represented by <paramref name="name"/></returns>
        public static global::Foo.MyEnum Parse(
#if NETCOREAPP3_0_OR_GREATER
            [global::System.Diagnostics.CodeAnalysis.NotNullWhen(true)]
#endif
            in global::System.ReadOnlySpan<char> name,
            bool ignoreCase,
            bool allowMatchingMetadataAttribute)
                => TryParse(name, out var value, ignoreCase, allowMatchingMetadataAttribute) ? value : ThrowValueNotFound(name.ToString());

        /// <summary>
        /// Converts the span representation of the name or numeric value of
        /// an <see cref="global::Foo.MyEnum" /> to the equivalent instance.
        /// The return value indicates whether the conversion succeeded.
        /// </summary>
        /// <param name="name">The span representation of the enumeration name or underlying value to convert</param>
        /// <param name="value">When this method returns, contains an object of type 
        /// <see cref="global::Foo.MyEnum" /> whose
        /// value is represented by <paramref name="value"/> if the parse operation succeeds.
        /// If the parse operation fails, contains the default value of the underlying type
        /// of <see cref="global::Foo.MyEnum" />. This parameter is passed uninitialized.</param>
        /// <returns><c>true</c> if the value parameter was converted successfully; otherwise, <c>false</c>.</returns>
        public static bool TryParse(
#if NETCOREAPP3_0_OR_GREATER
            [global::System.Diagnostics.CodeAnalysis.NotNullWhen(true)]
#endif
            in global::System.ReadOnlySpan<char> name, 
            out global::Foo.MyEnum value)
            => TryParse(name, out value, false, false);

        /// <summary>
        /// Converts the span representation of the name or numeric value of
        /// an <see cref="global::Foo.MyEnum" /> to the equivalent instance.
        /// The return value indicates whether the conversion succeeded.
        /// </summary>
        /// <param name="name">The span representation of the enumeration name or underlying value to convert</param>
        /// <param name="value">When this method returns, contains an object of type 
        /// <see cref="global::Foo.MyEnum" /> whose
        /// value is represented by <paramref name="value"/> if the parse operation succeeds.
        /// If the parse operation fails, contains the default value of the underlying type
        /// of <see cref="global::Foo.MyEnum" />. This parameter is passed uninitialized.</param>
        /// <param name="ignoreCase"><c>true</c> to read value in case insensitive mode; <c>false</c> to read value in case sensitive mode.</param>
        /// <returns><c>true</c> if the value parameter was converted successfully; otherwise, <c>false</c>.</returns>
        public static bool TryParse(
#if NETCOREAPP3_0_OR_GREATER
            [global::System.Diagnostics.CodeAnalysis.NotNullWhen(true)]
#endif
            in global::System.ReadOnlySpan<char> name,
            out global::Foo.MyEnum value,
            bool ignoreCase)
            => TryParse(name, out value, ignoreCase, false);

        /// <summary>
        /// Converts the span representation of the name or numeric value of
        /// an <see cref="global::Foo.MyEnum" /> to the equivalent instance.
        /// The return value indicates whether the conversion succeeded.
        /// </summary>
        /// <param name="name">The span representation of the enumeration name or underlying value to convert</param>
        /// <param name="result">When this method returns, contains an object of type 
        /// <see cref="global::Foo.MyEnum" /> whose
        /// value is represented by <paramref name="result"/> if the parse operation succeeds.
        /// If the parse operation fails, contains the default value of the underlying type
        /// of <see cref="global::Foo.MyEnum" />. This parameter is passed uninitialized.</param>
        /// <param name="ignoreCase"><c>true</c> to read value in case insensitive mode; <c>false</c> to read value in case sensitive mode.</param>
        /// <param name="allowMatchingMetadataAttribute">If <c>true</c>, considers the value included in metadata attributes such as
        /// <c>[Display]</c> attribute when parsing, otherwise only considers the member names.</param>
        /// <returns><c>true</c> if the value parameter was converted successfully; otherwise, <c>false</c>.</returns>
        public static bool TryParse(
#if NETCOREAPP3_0_OR_GREATER
            [global::System.Diagnostics.CodeAnalysis.NotNullWhen(true)]
#endif
            in global::System.ReadOnlySpan<char> name,
            out global::Foo.MyEnum result,
            bool ignoreCase,
            bool allowMatchingMetadataAttribute)
                => ignoreCase
                    ? TryParseIgnoreCase(in name, out result, allowMatchingMetadataAttribute)
                    : TryParseWithCase(in name, out result, allowMatchingMetadataAttribute);

        private static bool TryParseIgnoreCase(
#if NETCOREAPP3_0_OR_GREATER
            [global::System.Diagnostics.CodeAnalysis.NotNullWhen(true)]
#endif
            in global::System.ReadOnlySpan<char> name,
            out global::Foo.MyEnum result,
            bool allowMatchingMetadataAttribute)
        {
            switch (name)
            {
                case global::System.ReadOnlySpan<char> current when global::System.MemoryExtensions.Equals(current, nameof(global::Foo.MyEnum.First), global::System.StringComparison.OrdinalIgnoreCase):
                    result = global::Foo.MyEnum.First;
                    return true;
                case global::System.ReadOnlySpan<char> current when global::System.MemoryExtensions.Equals(current, nameof(global::Foo.MyEnum.Second), global::System.StringComparison.OrdinalIgnoreCase):
                    result = global::Foo.MyEnum.Second;
                    return true;
                case global::System.ReadOnlySpan<char> current when global::System.MemoryExtensions.Equals(current, nameof(global::Foo.MyEnum.Third), global::System.StringComparison.OrdinalIgnoreCase):
                    result = global::Foo.MyEnum.Third;
                    return true;
                case global::System.ReadOnlySpan<char> current when int.TryParse(name, out var numericResult):
                    result = (global::Foo.MyEnum)numericResult;
                    return true;
                default:
                    result = default;
                    return false;
            }
        }

        private static bool TryParseWithCase(
#if NETCOREAPP3_0_OR_GREATER
            [global::System.Diagnostics.CodeAnalysis.NotNullWhen(true)]
#endif
            in global::System.ReadOnlySpan<char> name,
            out global::Foo.MyEnum result,
            bool allowMatchingMetadataAttribute)
        {
            switch (name)
            {
                case global::System.ReadOnlySpan<char> current when global::System.MemoryExtensions.Equals(current, nameof(global::Foo.MyEnum.First), global::System.StringComparison.Ordinal):
                    result = global::Foo.MyEnum.First;
                    return true;
                case global::System.ReadOnlySpan<char> current when global::System.MemoryExtensions.Equals(current, nameof(global::Foo.MyEnum.Second), global::System.StringComparison.Ordinal):
                    result = global::Foo.MyEnum.Second;
                    return true;
                case global::System.ReadOnlySpan<char> current when global::System.MemoryExtensions.Equals(current, nameof(global::Foo.MyEnum.Third), global::System.StringComparison.Ordinal):
                    result = global::Foo.MyEnum.Third;
                    return true;
                case global::System.ReadOnlySpan<char> current when int.TryParse(name, out var numericResult):
                    result = (global::Foo.MyEnum)numericResult;
                    return true;
                default:
                    result = default;
                    return false;
            }
        }
#endif

        /// <summary>
        /// Cast a value of <see cref="global::Foo.MyEnum" /> to the underlying type (<c>int</c>).
        /// This is mainly a convenience method.
        /// </summary>
        /// <returns>The value of <see cref="global::Foo.MyEnum" /> cast to the underlying type.</returns>
        public static int AsUnderlyingType(this global::Foo.MyEnum value)
        {
            return (int) value;
        }

        /// <summary>
        /// Retrieves an array of the values of the members defined in
        /// <see cref="global::Foo.MyEnum" />.
        /// Note that this returns a new array with every invocation, so
        /// should be cached if appropriate.
        /// </summary>
        /// <returns>An array of the values defined in <see cref="global::Foo.MyEnum" /></returns>
        public static global::Foo.MyEnum[] GetValues()
        {
            return new[]
            {
                global::Foo.MyEnum.First,
                global::Foo.MyEnum.Second,
                global::Foo.MyEnum.Third,
            };
        }

        /// <summary>
        /// Retrieves an array of the underlying-values of the members defined in
        /// <see cref="global::Foo.MyEnum" />.
        /// Note that this returns a new array with every invocation, so
        /// should be cached if appropriate.
        /// </summary>
        /// <returns>An array of the underlying-values defined in <see cref="global::Foo.MyEnum" /></returns>
        public static int[] GetValuesAsUnderlyingType()
        {
            return new[]
            {
                (int) global::Foo.MyEnum.First,
                (int) global::Foo.MyEnum.Second,
                (int) global::Foo.MyEnum.Third,
            };
        }

        /// <summary>
        /// Retrieves an array of the names of the members defined in
        /// <see cref="global::Foo.MyEnum" />.
        /// Note that this returns a new array with every invocation, so
        /// should be cached if appropriate.
        /// </summary>
        /// <returns>An array of the names of the members defined in <see cref="global::Foo.MyEnum" /></returns>
        public static string[] GetNames()
        {
            return new[]
            {
                nameof(global::Foo.MyEnum.First),
                nameof(global::Foo.MyEnum.Second),
                nameof(global::Foo.MyEnum.Third),
            };
        }
    }
#pragma warning restore CS0612 // Ignore usages of obsolete members or enums
#pragma warning restore CS0618 // Ignore usages of obsolete members or enums
}
  
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the NetEscapades.EnumGenerators source generator
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#nullable enable

namespace Bar
{
#pragma warning disable CS0612 // Ignore usages of obsolete members or enums
#pragma warning disable CS0618 // Ignore usages of obsolete members or enums
    /// <summary>
    /// Extension methods for <see cref="global::Bar.MyEnum" />
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NetEscapades.EnumGenerators", "FIXED_VERSION")]
    internal static partial class MyEnumExtensions
    {
        /// <summary>
        /// The number of members in the enum.
        /// This is a non-distinct count of defined names.
        /// </summary>
        public const int Length = 3;

        /// <summary>
        /// Returns the string representation of the <see cref="global::Bar.MyEnum"/> value.
        /// If the attribute is decorated with a <c>[Display]</c> or <c>[Description]</c>attribute, then
        /// uses the provided value. Otherwise uses the name of the member, equivalent to
        /// calling <c>ToString()</c> on <paramref name="value"/>.
        /// </summary>
        /// <param name="value">The value to retrieve the string value for</param>
        /// <param name="useMetadataAttributes">If <c>true</c> uses the value provided in the
        /// <c>[Display]</c> or <c>[Description]</c>attribute as the string representation of the member.
        /// If <c>false</c>, always uses the name of the member, the same as if <c>ToString()</c> was called.</param>
        /// <returns>The string representation of the value</returns>
        public static string ToStringFast(this global::Bar.MyEnum value, bool useMetadataAttributes)
            => useMetadataAttributes ? value.ToStringFastWithMetadata() : value.ToStringFast();

        /// <summary>
        /// Returns the string representation of the <see cref="global::Bar.MyEnum"/> value.
        /// Directly equivalent to calling <c>ToString()</c> on <paramref name="value"/>.
        /// </summary>
        /// <param name="value">The value to retrieve the string value for</param>
        /// <returns>The string representation of the value, the same as that returned by <c>ToString()</c></returns>
        public static string ToStringFast(this global::Bar.MyEnum value)
            => value switch
            {
                global::Bar.MyEnum.First => nameof(global::Bar.MyEnum.First),
                global::Bar.MyEnum.Second => nameof(global::Bar.MyEnum.Second),
                global::Bar.MyEnum.Third => nameof(global::Bar.MyEnum.Third),
                _ => value.ToString(),
            };

        private static string ToStringFastWithMetadata(this global::Bar.MyEnum value)
            => value.ToStringFast();

        /// <summary>
        /// Determines whether one or more bit fields are set in the current instance.
        /// Equivalent to calling <see cref="global::System.Enum.HasFlag" /> on <paramref name="value"/>.
        /// </summary>
        /// <param name="value">The value of the instance to investigate</param>
        /// <param name="flag">The flag to check for</param>
        /// <returns><c>true</c> if the fields set in the flag are also set in the current instance; otherwise <c>false</c>.</returns>
        /// <remarks>If the underlying value of <paramref name="flag"/> is zero, the method returns true.
        /// This is consistent with the behaviour of <see cref="global::System.Enum.HasFlag" /></remarks>
        public static bool HasFlagFast(this global::Bar.MyEnum value, global::Bar.MyEnum flag)
            => flag == 0 ? true : (value & flag) == flag;

        /// <summary>
        /// Returns a boolean telling whether the given enum value exists in the enumeration.
        /// </summary>
        /// <param name="value">The value to check if it's defined</param>
        /// <returns><c>true</c> if the value exists in the enumeration, <c>false</c> otherwise</returns>
        public static bool IsDefined(global::Bar.MyEnum value)
            => value switch
            {
                global::Bar.MyEnum.First => true,
                global::Bar.MyEnum.Second => true,
                global::Bar.MyEnum.Third => true,
                _ => false,
            };

        /// <summary>
        /// Returns a boolean telling whether an enum with the given name exists in the enumeration.
        /// </summary>
        /// <param name="name">The name to check if it's defined</param>
        /// <returns><c>true</c> if a member with the name exists in the enumeration, <c>false</c> otherwise</returns>
        public static bool IsDefined(string name) => IsDefined(name, allowMatchingMetadataAttribute: false);

        /// <summary>
        /// Returns a boolean telling whether an enum with the given name exists in the enumeration,
        /// or if a member decorated with a <c>[Display]</c> attribute
        /// with the required name exists.
        /// </summary>
        /// <param name="name">The name to check if it's defined</param>
        /// <param name="allowMatchingMetadataAttribute">If <c>true</c>, considers the value of metadata attributes,otherwise ignores them</param>
        /// <returns><c>true</c> if a member with the name exists in the enumeration, or a member is decorated
        /// with a <c>[Display]</c> attribute with the name, <c>false</c> otherwise</returns>
        public static bool IsDefined(string name, bool allowMatchingMetadataAttribute)
        {
            return name switch
            {
                nameof(global::Bar.MyEnum.First) => true,
                nameof(global::Bar.MyEnum.Second) => true,
                nameof(global::Bar.MyEnum.Third) => true,
                _ => false,
            };
        }

#if NETCOREAPP && !NETCOREAPP2_0 && !NETCOREAPP1_1 && !NETCOREAPP1_0
        /// <summary>
        /// Returns a boolean telling whether an enum with the given name exists in the enumeration
        /// </summary>
        /// <param name="name">The name to check if it's defined</param>
        /// <returns><c>true</c> if a member with the name exists in the enumeration, <c>false</c> otherwise</returns>
        public static bool IsDefined(in global::System.ReadOnlySpan<char> name) => IsDefined(name, allowMatchingMetadataAttribute: false);

        /// <summary>
        /// Returns a boolean telling whether an enum with the given name exists in the enumeration,
        /// or optionally if a member decorated with a <c>[Display]</c> attribute
        /// with the required name exists.
        /// Slower then the <see cref="IsDefined(string, bool)" /> overload, but doesn't allocate memory./>
        /// </summary>
        /// <param name="name">The name to check if it's defined</param>
        /// <param name="allowMatchingMetadataAttribute">If <c>true</c>, considers the value of metadata attributes,otherwise ignores them</param>
        /// <returns><c>true</c> if a member with the name exists in the enumeration, or a member is decorated
        /// with a <c>[Display]</c> attribute with the name, <c>false</c> otherwise</returns>
        public static bool IsDefined(in global::System.ReadOnlySpan<char> name, bool allowMatchingMetadataAttribute)
        {
            return name switch
            {
                global::System.ReadOnlySpan<char> current when global::System.MemoryExtensions.Equals(current, nameof(global::Bar.MyEnum.First), global::System.StringComparison.Ordinal) => true,
                global::System.ReadOnlySpan<char> current when global::System.MemoryExtensions.Equals(current, nameof(global::Bar.MyEnum.Second), global::System.StringComparison.Ordinal) => true,
                global::System.ReadOnlySpan<char> current when global::System.MemoryExtensions.Equals(current, nameof(global::Bar.MyEnum.Third), global::System.StringComparison.Ordinal) => true,
                _ => false,
            };
        }
#endif

        /// <summary>
        /// Converts the string representation of the name or numeric value of
        /// an <see cref="global::Bar.MyEnum" /> to the equivalent instance.
        /// </summary>
        /// <param name="name">The case-sensitive string representation of the enumeration name or underlying value to convert</param>
        /// <returns>An object of type <see cref="global::Bar.MyEnum" /> whose
        /// value is represented by <paramref name="name"/></returns>
        public static global::Bar.MyEnum Parse(
#if NETCOREAPP3_0_OR_GREATER
            [global::System.Diagnostics.CodeAnalysis.NotNullWhen(true)]
#endif
            string? name)
                => TryParse(name, out var value, false, false) ? value : ThrowValueNotFound(name);

        /// <summary>
        /// Converts the string representation of the name or numeric value of
        /// an <see cref="global::Bar.MyEnum" /> to the equivalent instance.
        /// </summary>
        /// <param name="name">The case-sensitive string representation of the enumeration name or underlying value to convert</param>
        /// <param name="ignoreCase"><c>true</c> to read value in case insensitive mode; <c>false</c> to read value in case sensitive mode.</param>
        /// <returns>An object of type <see cref="global::Bar.MyEnum" /> whose
        /// value is represented by <paramref name="name"/></returns>
        public static global::Bar.MyEnum Parse(
#if NETCOREAPP3_0_OR_GREATER
            [global::System.Diagnostics.CodeAnalysis.NotNullWhen(true)]
#endif
            string? name,
            bool ignoreCase)
                => TryParse(name, out var value, ignoreCase, false) ? value : ThrowValueNotFound(name);

        /// <summary>
        /// Converts the string representation of the name or numeric value of
        /// an <see cref="global::Bar.MyEnum" /> to the equivalent instance.
        /// </summary>
        /// <param name="name">The case-sensitive string representation of the enumeration name or underlying value to convert</param>
        /// <param name="ignoreCase"><c>true</c> to read value in case insensitive mode; <c>false</c> to read value in case sensitive mode.</param>
        /// <param name="allowMatchingMetadataAttribute">If <c>true</c>, considers the value included in metadata attributes such as
        /// <c>[Display]</c> attribute when parsing, otherwise only considers the member names.</param>
        /// <returns>An object of type <see cref="global::Bar.MyEnum" /> whose
        /// value is represented by <paramref name="name"/></returns>
        public static global::Bar.MyEnum Parse(
#if NETCOREAPP3_0_OR_GREATER
            [global::System.Diagnostics.CodeAnalysis.NotNullWhen(true)]
#endif
            string? name,
            bool ignoreCase,
            bool allowMatchingMetadataAttribute)
                => TryParse(name, out var value, ignoreCase, allowMatchingMetadataAttribute) ? value : ThrowValueNotFound(name);
    
#if NETCOREAPP3_0_OR_GREATER
        [global::System.Diagnostics.CodeAnalysis.DoesNotReturn]
#endif
        private static global::Bar.MyEnum ThrowValueNotFound(string? name)
            => throw new global::System.ArgumentException($"Requested value '{name}' was not found.");

        /// <summary>
        /// Converts the string representation of the name or numeric value of
        /// an <see cref="global::Bar.MyEnum" /> to the equivalent instance.
        /// The return value indicates whether the conversion succeeded.
        /// </summary>
        /// <param name="name">The case-sensitive string representation of the enumeration name or underlying value to convert</param>
        /// <param name="value">When this method returns, contains an object of type 
        /// <see cref="global::Bar.MyEnum" /> whose
        /// value is represented by <paramref name="value"/> if the parse operation succeeds.
        /// If the parse operation fails, contains the default value of the underlying type
        /// of <see cref="global::Bar.MyEnum" />. This parameter is passed uninitialized.</param>
        /// <returns><c>true</c> if the value parameter was converted successfully; otherwise, <c>false</c>.</returns>
        public static bool TryParse(
#if NETCOREAPP3_0_OR_GREATER
            [global::System.Diagnostics.CodeAnalysis.NotNullWhen(true)]
#endif
            string? name, 
            out global::Bar.MyEnum value)
            => TryParse(name, out value, false, false);

        /// <summary>
        /// Converts the string representation of the name or numeric value of
        /// an <see cref="global::Bar.MyEnum" /> to the equivalent instance.
        /// The return value indicates whether the conversion succeeded.
        /// </summary>
        /// <param name="name">The string representation of the enumeration name or underlying value to convert</param>
        /// <param name="value">When this method returns, contains an object of type 
        /// <see cref="global::Bar.MyEnum" /> whose
        /// value is represented by <paramref name="value"/> if the parse operation succeeds.
        /// If the parse operation fails, contains the default value of the underlying type
        /// of <see cref="global::Bar.MyEnum" />. This parameter is passed uninitialized.</param>
        /// <param name="ignoreCase"><c>true</c> to read value in case insensitive mode; <c>false</c> to read value in case sensitive mode.</param>
        /// <returns><c>true</c> if the value parameter was converted successfully; otherwise, <c>false</c>.</returns>
        public static bool TryParse(
#if NETCOREAPP3_0_OR_GREATER
            [global::System.Diagnostics.CodeAnalysis.NotNullWhen(true)]
#endif
            string? name, 
            out global::Bar.MyEnum value,
            bool ignoreCase) 
            => TryParse(name, out value, ignoreCase, false);

        /// <summary>
        /// Converts the string representation of the name or numeric value of
        /// an <see cref="global::Bar.MyEnum" /> to the equivalent instance.
        /// The return value indicates whether the conversion succeeded.
        /// </summary>
        /// <param name="name">The string representation of the enumeration name or underlying value to convert</param>
        /// <param name="value">When this method returns, contains an object of type 
        /// <see cref="global::Bar.MyEnum" /> whose
        /// value is represented by <paramref name="value"/> if the parse operation succeeds.
        /// If the parse operation fails, contains the default value of the underlying type
        /// of <see cref="global::Bar.MyEnum" />. This parameter is passed uninitialized.</param>
        /// <param name="ignoreCase"><c>true</c> to read value in case insensitive mode; <c>false</c> to read value in case sensitive mode.</param>
        /// <param name="allowMatchingMetadataAttribute">If <c>true</c>, considers the value included in metadata attributes such as
        /// <c>[Display]</c> attribute when parsing, otherwise only considers the member names.</param>
        /// <returns><c>true</c> if the value parameter was converted successfully; otherwise, <c>false</c>.</returns>
        public static bool TryParse(
#if NETCOREAPP3_0_OR_GREATER
            [global::System.Diagnostics.CodeAnalysis.NotNullWhen(true)]
#endif
            string? name, 
            out global::Bar.MyEnum value, 
            bool ignoreCase,
            bool allowMatchingMetadataAttribute)
                => ignoreCase
                    ? TryParseIgnoreCase(name, out value, allowMatchingMetadataAttribute)
                    : TryParseWithCase(name, out value, allowMatchingMetadataAttribute);

        private static bool TryParseIgnoreCase(
#if NETCOREAPP3_0_OR_GREATER
            [global::System.Diagnostics.CodeAnalysis.NotNullWhen(true)]
#endif
            string? name,
            out global::Bar.MyEnum value,
            bool allowMatchingMetadataAttribute)
        {

            switch (name)
            {
                case string s when s.Equals(nameof(global::Bar.MyEnum.First), global::System.StringComparison.OrdinalIgnoreCase):
                    value = global::Bar.MyEnum.First;
                    return true;
                case string s when s.Equals(nameof(global::Bar.MyEnum.Second), global::System.StringComparison.OrdinalIgnoreCase):
                    value = global::Bar.MyEnum.Second;
                    return true;
                case string s when s.Equals(nameof(global::Bar.MyEnum.Third), global::System.StringComparison.OrdinalIgnoreCase):
                    value = global::Bar.MyEnum.Third;
                    return true;
                case string s when int.TryParse(name, out var val):
                    value = (global::Bar.MyEnum)val;
                    return true;
                default:
                    value = default;
                    return false;
            }
        }

        private static bool TryParseWithCase(
#if NETCOREAPP3_0_OR_GREATER
            [global::System.Diagnostics.CodeAnalysis.NotNullWhen(true)]
#endif
            string? name,
            out global::Bar.MyEnum value,
            bool allowMatchingMetadataAttribute)
        {

            switch (name)
            {
                case nameof(global::Bar.MyEnum.First):
                    value = global::Bar.MyEnum.First;
                    return true;
                case nameof(global::Bar.MyEnum.Second):
                    value = global::Bar.MyEnum.Second;
                    return true;
                case nameof(global::Bar.MyEnum.Third):
                    value = global::Bar.MyEnum.Third;
                    return true;
                case string s when int.TryParse(name, out var val):
                    value = (global::Bar.MyEnum)val;
                    return true;
                default:
                    value = default;
                    return false;
            }
        }

#if NETCOREAPP && !NETCOREAPP2_0 && !NETCOREAPP1_1 && !NETCOREAPP1_0
        /// <summary>
        /// Converts the string representation of the name or numeric value of
        /// an <see cref="global::Bar.MyEnum" /> to the equivalent instance.
        /// </summary>
        /// <param name="name">The case-sensitive string representation of the enumeration name or underlying value to convert</param>
        /// <returns>An object of type <see cref="global::Bar.MyEnum" /> whose
        /// value is represented by <paramref name="name"/></returns>
        public static global::Bar.MyEnum Parse(
#if NETCOREAPP3_0_OR_GREATER
            [global::System.Diagnostics.CodeAnalysis.NotNullWhen(true)]
#endif
            in global::System.ReadOnlySpan<char> name)
                => TryParse(name, out var value, false, false) ? value : ThrowValueNotFound(name.ToString());

        /// <summary>
        /// Converts the string representation of the name or numeric value of
        /// an <see cref="global::Bar.MyEnum" /> to the equivalent instance.
        /// </summary>
        /// <param name="name">The case-sensitive string representation of the enumeration name or underlying value to convert</param>
        /// <param name="ignoreCase"><c>true</c> to read value in case insensitive mode; <c>false</c> to read value in case sensitive mode.</param>
        /// <returns>An object of type <see cref="global::Bar.MyEnum" /> whose
        /// value is represented by <paramref name="name"/></returns>
        public static global::Bar.MyEnum Parse(
#if NETCOREAPP3_0_OR_GREATER
            [global::System.Diagnostics.CodeAnalysis.NotNullWhen(true)]
#endif
            in global::System.ReadOnlySpan<char> name,
            bool ignoreCase)
                => TryParse(name, out var value, ignoreCase, false) ? value : ThrowValueNotFound(name.ToString());

        /// <summary>
        /// Converts the string representation of the name or numeric value of
        /// an <see cref="global::Bar.MyEnum" /> to the equivalent instance.
        /// </summary>
        /// <param name="name">The case-sensitive string representation of the enumeration name or underlying value to convert</param>
        /// <param name="ignoreCase"><c>true</c> to read value in case insensitive mode; <c>false</c> to read value in case sensitive mode.</param>
        /// <param name="allowMatchingMetadataAttribute">If <c>true</c>, considers the value included in metadata attributes such as
        /// <c>[Display]</c> attribute when parsing, otherwise only considers the member names.</param>
        /// <returns>An object of type <see cref="global::Bar.MyEnum" /> whose
        /// value is represented by <paramref name="name"/></returns>
        public static global::Bar.MyEnum Parse(
#if NETCOREAPP3_0_OR_GREATER
            [global::System.Diagnostics.CodeAnalysis.NotNullWhen(true)]
#endif
            in global::System.ReadOnlySpan<char> name,
            bool ignoreCase,
            bool allowMatchingMetadataAttribute)
                => TryParse(name, out var value, ignoreCase, allowMatchingMetadataAttribute) ? value : ThrowValueNotFound(name.ToString());

        /// <summary>
        /// Converts the span representation of the name or numeric value of
        /// an <see cref="global::Bar.MyEnum" /> to the equivalent instance.
        /// The return value indicates whether the conversion succeeded.
        /// </summary>
        /// <param name="name">The span representation of the enumeration name or underlying value to convert</param>
        /// <param name="value">When this method returns, contains an object of type 
        /// <see cref="global::Bar.MyEnum" /> whose
        /// value is represented by <paramref name="value"/> if the parse operation succeeds.
        /// If the parse operation fails, contains the default value of the underlying type
        /// of <see cref="global::Bar.MyEnum" />. This parameter is passed uninitialized.</param>
        /// <returns><c>true</c> if the value parameter was converted successfully; otherwise, <c>false</c>.</returns>
        public static bool TryParse(
#if NETCOREAPP3_0_OR_GREATER
            [global::System.Diagnostics.CodeAnalysis.NotNullWhen(true)]
#endif
            in global::System.ReadOnlySpan<char> name, 
            out global::Bar.MyEnum value)
            => TryParse(name, out value, false, false);

        /// <summary>
        /// Converts the span representation of the name or numeric value of
        /// an <see cref="global::Bar.MyEnum" /> to the equivalent instance.
        /// The return value indicates whether the conversion succeeded.
        /// </summary>
        /// <param name="name">The span representation of the enumeration name or underlying value to convert</param>
        /// <param name="value">When this method returns, contains an object of type 
        /// <see cref="global::Bar.MyEnum" /> whose
        /// value is represented by <paramref name="value"/> if the parse operation succeeds.
        /// If the parse operation fails, contains the default value of the underlying type
        /// of <see cref="global::Bar.MyEnum" />. This parameter is passed uninitialized.</param>
        /// <param name="ignoreCase"><c>true</c> to read value in case insensitive mode; <c>false</c> to read value in case sensitive mode.</param>
        /// <returns><c>true</c> if the value parameter was converted successfully; otherwise, <c>false</c>.</returns>
        public static bool TryParse(
#if NETCOREAPP3_0_OR_GREATER
            [global::System.Diagnostics.CodeAnalysis.NotNullWhen(true)]
#endif
            in global::System.ReadOnlySpan<char> name,
            out global::Bar.MyEnum value,
            bool ignoreCase)
            => TryParse(name, out value, ignoreCase, false);

        /// <summary>
        /// Converts the span representation of the name or numeric value of
        /// an <see cref="global::Bar.MyEnum" /> to the equivalent instance.
        /// The return value indicates whether the conversion succeeded.
        /// </summary>
        /// <param name="name">The span representation of the enumeration name or underlying value to convert</param>
        /// <param name="result">When this method returns, contains an object of type 
        /// <see cref="global::Bar.MyEnum" /> whose
        /// value is represented by <paramref name="result"/> if the parse operation succeeds.
        /// If the parse operation fails, contains the default value of the underlying type
        /// of <see cref="global::Bar.MyEnum" />. This parameter is passed uninitialized.</param>
        /// <param name="ignoreCase"><c>true</c> to read value in case insensitive mode; <c>false</c> to read value in case sensitive mode.</param>
        /// <param name="allowMatchingMetadataAttribute">If <c>true</c>, considers the value included in metadata attributes such as
        /// <c>[Display]</c> attribute when parsing, otherwise only considers the member names.</param>
        /// <returns><c>true</c> if the value parameter was converted successfully; otherwise, <c>false</c>.</returns>
        public static bool TryParse(
#if NETCOREAPP3_0_OR_GREATER
            [global::System.Diagnostics.CodeAnalysis.NotNullWhen(true)]
#endif
            in global::System.ReadOnlySpan<char> name,
            out global::Bar.MyEnum result,
            bool ignoreCase,
            bool allowMatchingMetadataAttribute)
                => ignoreCase
                    ? TryParseIgnoreCase(in name, out result, allowMatchingMetadataAttribute)
                    : TryParseWithCase(in name, out result, allowMatchingMetadataAttribute);

        private static bool TryParseIgnoreCase(
#if NETCOREAPP3_0_OR_GREATER
            [global::System.Diagnostics.CodeAnalysis.NotNullWhen(true)]
#endif
            in global::System.ReadOnlySpan<char> name,
            out global::Bar.MyEnum result,
            bool allowMatchingMetadataAttribute)
        {
            switch (name)
            {
                case global::System.ReadOnlySpan<char> current when global::System.MemoryExtensions.Equals(current, nameof(global::Bar.MyEnum.First), global::System.StringComparison.OrdinalIgnoreCase):
                    result = global::Bar.MyEnum.First;
                    return true;
                case global::System.ReadOnlySpan<char> current when global::System.MemoryExtensions.Equals(current, nameof(global::Bar.MyEnum.Second), global::System.StringComparison.OrdinalIgnoreCase):
                    result = global::Bar.MyEnum.Second;
                    return true;
                case global::System.ReadOnlySpan<char> current when global::System.MemoryExtensions.Equals(current, nameof(global::Bar.MyEnum.Third), global::System.StringComparison.OrdinalIgnoreCase):
                    result = global::Bar.MyEnum.Third;
                    return true;
                case global::System.ReadOnlySpan<char> current when int.TryParse(name, out var numericResult):
                    result = (global::Bar.MyEnum)numericResult;
                    return true;
                default:
                    result = default;
                    return false;
            }
        }

        private static bool TryParseWithCase(
#if NETCOREAPP3_0_OR_GREATER
            [global::System.Diagnostics.CodeAnalysis.NotNullWhen(true)]
#endif
            in global::System.ReadOnlySpan<char> name,
            out global::Bar.MyEnum result,
            bool allowMatchingMetadataAttribute)
        {
            switch (name)
            {
                case global::System.ReadOnlySpan<char> current when global::System.MemoryExtensions.Equals(current, nameof(global::Bar.MyEnum.First), global::System.StringComparison.Ordinal):
                    result = global::Bar.MyEnum.First;
                    return true;
                case global::System.ReadOnlySpan<char> current when global::System.MemoryExtensions.Equals(current, nameof(global::Bar.MyEnum.Second), global::System.StringComparison.Ordinal):
                    result = global::Bar.MyEnum.Second;
                    return true;
                case global::System.ReadOnlySpan<char> current when global::System.MemoryExtensions.Equals(current, nameof(global::Bar.MyEnum.Third), global::System.StringComparison.Ordinal):
                    result = global::Bar.MyEnum.Third;
                    return true;
                case global::System.ReadOnlySpan<char> current when int.TryParse(name, out var numericResult):
                    result = (global::Bar.MyEnum)numericResult;
                    return true;
                default:
                    result = default;
                    return false;
            }
        }
#endif

        /// <summary>
        /// Cast a value of <see cref="global::Bar.MyEnum" /> to the underlying type (<c>int</c>).
        /// This is mainly a convenience method.
        /// </summary>
        /// <returns>The value of <see cref="global::Bar.MyEnum" /> cast to the underlying type.</returns>
        public static int AsUnderlyingType(this global::Bar.MyEnum value)
        {
            return (int) value;
        }

        /// <summary>
        /// Retrieves an array of the values of the members defined in
        /// <see cref="global::Bar.MyEnum" />.
        /// Note that this returns a new array with every invocation, so
        /// should be cached if appropriate.
        /// </summary>
        /// <returns>An array of the values defined in <see cref="global::Bar.MyEnum" /></returns>
        public static global::Bar.MyEnum[] GetValues()
        {
            return new[]
            {
                global::Bar.MyEnum.First,
                global::Bar.MyEnum.Second,
                global::Bar.MyEnum.Third,
            };
        }

        /// <summary>
        /// Retrieves an array of the underlying-values of the members defined in
        /// <see cref="global::Bar.MyEnum" />.
        /// Note that this returns a new array with every invocation, so
        /// should be cached if appropriate.
        /// </summary>
        /// <returns>An array of the underlying-values defined in <see cref="global::Bar.MyEnum" /></returns>
        public static int[] GetValuesAsUnderlyingType()
        {
            return new[]
            {
                (int) global::Bar.MyEnum.First,
                (int) global::Bar.MyEnum.Second,
                (int) global::Bar.MyEnum.Third,
            };
        }

        /// <summary>
        /// Retrieves an array of the names of the members defined in
        /// <see cref="global::Bar.MyEnum" />.
        /// Note that this returns a new array with every invocation, so
        /// should be cached if appropriate.
        /// </summary>
        /// <returns>An array of the names of the members defined in <see cref="global::Bar.MyEnum" /></returns>
        public static string[] GetNames()
        {
            return new[]
            {
                nameof(global::Bar.MyEnum.First),
                nameof(global::Bar.MyEnum.Second),
                nameof(global::Bar.MyEnum.Third),
            };
        }
    }
#pragma warning restore CS0612 // Ignore usages of obsolete members or enums
#pragma warning restore CS0618 // Ignore usages of obsolete members or enums
}
  
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the NetEscapades.EnumGenerators.Interceptors source generator
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#nullable enable

#if NETESCAPADES_ENUMGENERATORS_EMBED_ATTRIBUTES
namespace NetEscapades.EnumGenerators
{
    /// <summary>
    /// Add to an assembly to indicate that usages of the enum should
    /// be automatically intercepted to use the extension methods
    /// generated by EnumExtensionsAttribute in this project.
    /// Note that the extension methods must be accessible from this project,
    /// otherwise you will receive compilation errors
    /// </summary>
    [global::System.AttributeUsage(global::System.AttributeTargets.Assembly, AllowMultiple = true)]
    [global::System.Diagnostics.Conditional("NETESCAPADES_ENUMGENERATORS_USAGES")]
#if NET5_0_OR_GREATER
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage(Justification = "Generated by the NetEscapades.EnumGenerators.Interceptors source generator.")]
#else
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
#endif
    public class InterceptableAttribute<T> : global::System.Attribute
        where T: global::System.Enum
    {
        /// <summary>
        /// The namespace generated for the extension class. If not provided,
        /// and the referenced enum is in a different project, the namespace
        /// of the extension methods are assumed to be the same as the enum.
        /// </summary>
        public string? ExtensionClassNamespace { get; set; }
        
        /// <summary>
        /// The name used for the extension class. If not provided,
        /// and the referenced enum is in a different project, the enum name
        /// with an <c>Extensions</c> suffix will be assumed. For example for
        /// an Enum called StatusCodes, the assumed name will be StatusCodesExtensions.
        /// </summary>
        public string? ExtensionClassName { get; set; }
    }
}
#endif
  
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the NetEscapades.EnumGenerators.Interceptors source generator
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#nullable enable
namespace System.Runtime.CompilerServices
{
    // this type is needed by the compiler to implement interceptors - it doesn't need to
    // come from the runtime itself, though

    [global::System.Diagnostics.Conditional("DEBUG")] // not needed post-build, so: evaporate
    [global::System.AttributeUsage(global::System.AttributeTargets.Method, AllowMultiple = true)]
    sealed file class InterceptsLocationAttribute : global::System.Attribute
    {
        public InterceptsLocationAttribute(int version, string data)
        {
            _ = version;
            _ = data;
        }
    }
}

#pragma warning disable CS0612 // Ignore usages of obsolete members or enums
#pragma warning disable CS0618 // Ignore usages of obsolete members or enums
namespace NetEscapades.EnumGenerators
{
    static file class EnumInterceptors
    {
        [global::System.Runtime.CompilerServices.InterceptsLocation(123, "REDACTED")] // Program.cs(41,32)
        public static string MyEnumExtensionsToString(this global::System.Enum value)
            => global::Foo.MyEnumExtensions.ToStringFast((global::Foo.MyEnum)value);

        [global::System.Runtime.CompilerServices.InterceptsLocation(123, "REDACTED")] // Program.cs(37,32)
        [global::System.Runtime.CompilerServices.InterceptsLocation(123, "REDACTED")] // Program.cs(38,42)
        [global::System.Runtime.CompilerServices.InterceptsLocation(123, "REDACTED")] // Program.cs(40,31)
        public static bool MyEnumExtensionsHasFlag(this global::System.Enum value, global::System.Enum flag)
            => global::Foo.MyEnumExtensions.HasFlagFast((global::Foo.MyEnum)value, (global::Foo.MyEnum)flag);

    }
}
#pragma warning restore CS0612 // Ignore usages of obsolete members or enums
#pragma warning restore CS0618 // Ignore usages of obsolete members or enums

  
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the NetEscapades.EnumGenerators.Interceptors source generator
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#nullable enable
namespace System.Runtime.CompilerServices
{
    // this type is needed by the compiler to implement interceptors - it doesn't need to
    // come from the runtime itself, though

    [global::System.Diagnostics.Conditional("DEBUG")] // not needed post-build, so: evaporate
    [global::System.AttributeUsage(global::System.AttributeTargets.Method, AllowMultiple = true)]
    sealed file class InterceptsLocationAttribute : global::System.Attribute
    {
        public InterceptsLocationAttribute(int version, string data)
        {
            _ = version;
            _ = data;
        }
    }
}

#pragma warning disable CS0612 // Ignore usages of obsolete members or enums
#pragma warning disable CS0618 // Ignore usages of obsolete members or enums
namespace NetEscapades.EnumGenerators
{
    static file class EnumInterceptors
    {
        [global::System.Runtime.CompilerServices.InterceptsLocation(123, "REDACTED")] // Program.cs(42,41)
        public static string MyEnumExtensionsToString(this global::System.Enum value)
            => global::Bar.MyEnumExtensions.ToStringFast((global::Bar.MyEnum)value);

        [global::System.Runtime.CompilerServices.InterceptsLocation(123, "REDACTED")] // Program.cs(39,33)
        public static bool MyEnumExtensionsHasFlag(this global::System.Enum value, global::System.Enum flag)
            => global::Bar.MyEnumExtensions.HasFlagFast((global::Bar.MyEnum)value, (global::Bar.MyEnum)flag);

    }
}
#pragma warning restore CS0612 // Ignore usages of obsolete members or enums
#pragma warning restore CS0618 // Ignore usages of obsolete members or enums

]