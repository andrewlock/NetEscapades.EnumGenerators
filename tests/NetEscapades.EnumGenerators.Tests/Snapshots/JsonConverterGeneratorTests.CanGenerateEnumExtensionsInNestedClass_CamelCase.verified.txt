//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the NetEscapades.EnumGenerators source generator
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#nullable enable

namespace MyTestNameSpace
{
    /// <summary>
    /// Converts a <see cref="global::MyTestNameSpace.InnerClass.MyEnum" /> to or from JSON.
    /// </summary>
    internal sealed class MyEnumConverter : global::System.Text.Json.Serialization.JsonConverter<global::MyTestNameSpace.InnerClass.MyEnum>
    {
        /// <inheritdoc />
        /// <summary>
        /// Read and convert the JSON to <see cref="global::MyTestNameSpace.InnerClass.MyEnum" />.
        /// </summary>
        /// <remarks>
        /// A converter may throw any Exception, but should throw <see cref="global::System.Text.Json.JsonException" /> when the JSON is invalid.
        /// </remarks>
        public override global::MyTestNameSpace.InnerClass.MyEnum Read(ref global::System.Text.Json.Utf8JsonReader reader, global::System.Type typeToConvert, global::System.Text.Json.JsonSerializerOptions options)
        {
#if NETCOREAPP && !NETCOREAPP2_0 && !NETCOREAPP1_1 && !NETCOREAPP1_0
            char[]? rentedBuffer = null;
            var bufferLength = reader.HasValueSequence ? checked((int)reader.ValueSequence.Length) : reader.ValueSpan.Length;

            var charBuffer = bufferLength <= 128
                ? stackalloc char[128]
                : rentedBuffer = global::System.Buffers.ArrayPool<char>.Shared.Rent(bufferLength);

            var charsWritten = reader.CopyString(charBuffer);
            global::System.ReadOnlySpan<char> source = charBuffer[..charsWritten];
            try
            {
                if (global::MyTestNameSpace.MyEnumExtensions.TryParse(source, out var enumValue, true, false))
                    return enumValue;

                throw new global::System.Text.Json.JsonException($"{source.ToString()} is not a valid value.", null, null, null);
            }
            finally
            {
                if (rentedBuffer is not null)
                {
                    charBuffer[..charsWritten].Clear();
                    global::System.Buffers.ArrayPool<char>.Shared.Return(rentedBuffer);
                }
            }
#else
            var source = reader.GetString();
            if (global::MyTestNameSpace.MyEnumExtensions.TryParse(source, out var enumValue, true, false))
                return enumValue;

            throw new global::System.Text.Json.JsonException($"{source} is not a valid value.", null, null, null);
#endif
        }

        /// <inheritdoc />
        public override void Write(global::System.Text.Json.Utf8JsonWriter writer, global::MyTestNameSpace.InnerClass.MyEnum value, global::System.Text.Json.JsonSerializerOptions options)
            => writer.WriteStringValue(global::MyTestNameSpace.MyEnumExtensions.ToStringFast(value));
    }
}
