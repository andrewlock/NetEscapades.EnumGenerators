//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the NetEscapades.EnumGenerators source generator
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#nullable enable
#if NETCOREAPP && !NETCOREAPP2_0 && !NETCOREAPP1_1 && !NETCOREAPP1_0
using System;
#endif
#pragma warning disable 1591

namespace Something.Blah
{
    public static partial class ShortName
    {
        /// <summary>
        /// The number of members in the enum.
        /// This is a non-distinct count of defined names.
        /// </summary>
        public const int Length = 2;

        public static string ToStringFast(this Something.Blah.ShortName value)
            => value switch
            {
                Something.Blah.ShortName.First => nameof(Something.Blah.ShortName.First),
                Something.Blah.ShortName.Second => nameof(Something.Blah.ShortName.Second),
                _ => value.ToString(),
            };

       public static bool IsDefined(Something.Blah.ShortName value)
            => value switch
            {
                Something.Blah.ShortName.First => true,
                Something.Blah.ShortName.Second => true,
                _ => false,
            };

        public static bool IsDefined(string name) => IsDefined(name, allowMatchingMetadataAttribute: false);

        public static bool IsDefined(string name, bool allowMatchingMetadataAttribute)
        {
            return name switch
            {
                nameof(Something.Blah.ShortName.First) => true,
                nameof(Something.Blah.ShortName.Second) => true,
                _ => false,
            };
        }

#if NETCOREAPP && !NETCOREAPP2_0 && !NETCOREAPP1_1 && !NETCOREAPP1_0
        public static bool IsDefined(in ReadOnlySpan<char> name) => IsDefined(name, allowMatchingMetadataAttribute: false);

        /// <summary>
        /// Slower then the <see cref="IsDefined(string, bool)"/>,
        /// bacause the <c>ReadOnlySpan&lt;char&gt;</c> can't be cached like a string, tho it doesn't allocate memory./>
        /// </summary>
        /// <param name="name"></param>
        /// <param name="allowMatchingMetadataAttribute"></param>
        /// <returns><c>true</c> if defined, otherwise <c>false</c></returns>
        public static bool IsDefined(in ReadOnlySpan<char> name, bool allowMatchingMetadataAttribute)
        {
            return name switch
            {
                ReadOnlySpan<char> current when current.Equals(nameof(Something.Blah.ShortName.First).AsSpan(), System.StringComparison.Ordinal) => true,
                ReadOnlySpan<char> current when current.Equals(nameof(Something.Blah.ShortName.Second).AsSpan(), System.StringComparison.Ordinal) => true,
                _ => false,
            };
        }
#endif

        public static bool TryParse(
#if NETCOREAPP3_0_OR_GREATER
            [System.Diagnostics.CodeAnalysis.NotNullWhen(true)]
#endif
            string? name, 
            out Something.Blah.ShortName value)
            => TryParse(name, out value, false, false);

        public static bool TryParse(
#if NETCOREAPP3_0_OR_GREATER
            [System.Diagnostics.CodeAnalysis.NotNullWhen(true)]
#endif
            string? name, 
            out Something.Blah.ShortName value,
            bool ignoreCase) 
            => TryParse(name, out value, ignoreCase, false);

        public static bool TryParse(
#if NETCOREAPP3_0_OR_GREATER
            [System.Diagnostics.CodeAnalysis.NotNullWhen(true)]
#endif
            string? name, 
            out Something.Blah.ShortName value, 
            bool ignoreCase, 
            bool allowMatchingMetadataAttribute)
        {
            if (ignoreCase)
            {
                switch (name)
                {
                    case string s when s.Equals(nameof(Something.Blah.ShortName.First), System.StringComparison.OrdinalIgnoreCase):
                        value = Something.Blah.ShortName.First;
                        return true;
                    case string s when s.Equals(nameof(Something.Blah.ShortName.Second), System.StringComparison.OrdinalIgnoreCase):
                        value = Something.Blah.ShortName.Second;
                        return true;
                    case string s when int.TryParse(name, out var val):
                        value = (Something.Blah.ShortName)val;
                        return true;
                    default:
                        value = default;
                        return false;
                }
            }
            else
            {
                switch (name)
                {
                    case nameof(Something.Blah.ShortName.First):
                        value = Something.Blah.ShortName.First;
                        return true;
                    case nameof(Something.Blah.ShortName.Second):
                        value = Something.Blah.ShortName.Second;
                        return true;
                    case string s when int.TryParse(name, out var val):
                        value = (Something.Blah.ShortName)val;
                        return true;
                    default:
                        value = default;
                        return false;
                }
            }
        }

#if NETCOREAPP && !NETCOREAPP2_0 && !NETCOREAPP1_1 && !NETCOREAPP1_0
        public static bool TryParse(
#if NETCOREAPP3_0_OR_GREATER
            [System.Diagnostics.CodeAnalysis.NotNullWhen(true)]
#endif
            in ReadOnlySpan<char> name, 
            out Something.Blah.ShortName value)
            => TryParse(name, out value, false, false);

        public static bool TryParse(
#if NETCOREAPP3_0_OR_GREATER
            [System.Diagnostics.CodeAnalysis.NotNullWhen(true)]
#endif
            in ReadOnlySpan<char> name, 
            out Something.Blah.ShortName value,
            bool ignoreCase) 
            => TryParse(name, out value, ignoreCase, false);

        /// <summary>
        /// Slower then the <see cref="TryParse(string, out Something.Blah.ShortName, bool, bool)"/>,
        /// bacause the <c>ReadOnlySpan&lt;char&gt;</c> can't be cached like a string, tho it doesn't allocate memory./>
        /// </summary>
        /// <param name="name"></param>
        /// <param name="result"></param>
        /// <param name="ignoreCase"></param>
        /// <param name="allowMatchingMetadataAttribute"></param>
        /// <returns></returns>
        public static bool TryParse(
#if NETCOREAPP3_0_OR_GREATER
            [System.Diagnostics.CodeAnalysis.NotNullWhen(true)]
#endif
            in ReadOnlySpan<char> name, 
            out Something.Blah.ShortName result, 
            bool ignoreCase,             
            bool allowMatchingMetadataAttribute)
        {
            if (ignoreCase)
            {
                switch (name)
                {
                    case ReadOnlySpan<char> current when current.Equals(nameof(Something.Blah.ShortName.First).AsSpan(), System.StringComparison.OrdinalIgnoreCase):
                        result = Something.Blah.ShortName.First;
                        return true;
                    case ReadOnlySpan<char> current when current.Equals(nameof(Something.Blah.ShortName.Second).AsSpan(), System.StringComparison.OrdinalIgnoreCase):
                        result = Something.Blah.ShortName.Second;
                        return true;
                    case ReadOnlySpan<char> current when int.TryParse(name, out var numericResult):
                        result = (Something.Blah.ShortName)numericResult;
                        return true;
                    default:
                        result = default;
                        return false;
                }
            }
            else
            {
                switch (name)
                {
                    case ReadOnlySpan<char> current when current.Equals(nameof(Something.Blah.ShortName.First).AsSpan(), System.StringComparison.Ordinal):
                        result = Something.Blah.ShortName.First;
                        return true;
                    case ReadOnlySpan<char> current when current.Equals(nameof(Something.Blah.ShortName.Second).AsSpan(), System.StringComparison.Ordinal):
                        result = Something.Blah.ShortName.Second;
                        return true;
                    case ReadOnlySpan<char> current when int.TryParse(name, out var numericResult):
                        result = (Something.Blah.ShortName)numericResult;
                        return true;
                    default:
                        result = default;
                        return false;
                }
            }
        }
#endif

        public static Something.Blah.ShortName[] GetValues()
        {
            return new[]
            {
                Something.Blah.ShortName.First,
                Something.Blah.ShortName.Second,
            };
        }

        public static string[] GetNames()
        {
            return new[]
            {
                nameof(Something.Blah.ShortName.First),
                nameof(Something.Blah.ShortName.Second),
            };
        }
    }
}
#pragma warning restore 1591