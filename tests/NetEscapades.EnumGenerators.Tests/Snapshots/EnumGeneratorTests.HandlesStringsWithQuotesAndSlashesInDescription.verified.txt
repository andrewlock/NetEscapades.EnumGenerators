//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the NetEscapades.EnumGenerators source generator
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#nullable enable
#if NETCOREAPP && !NETCOREAPP2_0 && !NETCOREAPP1_1 && !NETCOREAPP1_0
using System;
#endif

namespace Test
{
#pragma warning disable CS0612 // Ignore usages of obsolete members or enums
#pragma warning disable CS0618 // Ignore usages of obsolete members or enums
    /// <summary>
    /// Extension methods for <see cref="global::Test.StringTesting" />
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NetEscapades.EnumGenerators", "FIXED_VERSION")]
    public static partial class StringTestingExtensions
    {
        /// <summary>
        /// The number of members in the enum.
        /// This is a non-distinct count of defined names.
        /// </summary>
        public const int Length = 5;

        /// <summary>
        /// Returns the string representation of the <see cref="global::Test.StringTesting"/> value.
        /// If the attribute is decorated with a <c>[Display]</c> attribute, then
        /// uses the provided value. Otherwise uses the name of the member, equivalent to
        /// calling <c>ToString()</c> on <paramref name="value"/>.
        /// </summary>
        /// <param name="value">The value to retrieve the string value for</param>
        /// <returns>The string representation of the value</returns>
        public static string ToStringFast(this global::Test.StringTesting value)
            => value switch
            {
                global::Test.StringTesting.Quotes => "Quotes \"",
                global::Test.StringTesting.LiteralQuotes => "Literal Quotes \"",
                global::Test.StringTesting.Backslash => "Backslash \\",
                global::Test.StringTesting.BackslashLiteral => "LiteralBackslash \\",
                global::Test.StringTesting.NewLine => "New\nLine",
                _ => value.ToString(),
            };

        /// <summary>
        /// Returns a boolean telling whether the given enum value exists in the enumeration.
        /// </summary>
        /// <param name="value">The value to check if it's defined</param>
        /// <returns><c>true</c> if the value exists in the enumeration, <c>false</c> otherwise</returns>
       public static bool IsDefined(global::Test.StringTesting value)
            => value switch
            {
                global::Test.StringTesting.Quotes => true,
                global::Test.StringTesting.LiteralQuotes => true,
                global::Test.StringTesting.Backslash => true,
                global::Test.StringTesting.BackslashLiteral => true,
                global::Test.StringTesting.NewLine => true,
                _ => false,
            };

        /// <summary>
        /// Returns a boolean telling whether an enum with the given name exists in the enumeration.
        /// </summary>
        /// <param name="name">The name to check if it's defined</param>
        /// <returns><c>true</c> if a member with the name exists in the enumeration, <c>false</c> otherwise</returns>
        public static bool IsDefined(string name) => IsDefined(name, allowMatchingMetadataAttribute: false);

        /// <summary>
        /// Returns a boolean telling whether an enum with the given name exists in the enumeration,
        /// or if a member decorated with a <c>[Display]</c> attribute
        /// with the required name exists.
        /// </summary>
        /// <param name="name">The name to check if it's defined</param>
        /// <param name="allowMatchingMetadataAttribute">If <c>true</c>, considers the value of metadata attributes,otherwise ignores them</param>
        /// <returns><c>true</c> if a member with the name exists in the enumeration, or a member is decorated
        /// with a <c>[Display]</c> attribute with the name, <c>false</c> otherwise</returns>
        public static bool IsDefined(string name, bool allowMatchingMetadataAttribute)
        {
            var isDefinedInDisplayAttribute = false;
            if (allowMatchingMetadataAttribute)
            {
                isDefinedInDisplayAttribute = name switch
                {
                    "Quotes \"" => true,
                    "Literal Quotes \"" => true,
                    "Backslash \\" => true,
                    "LiteralBackslash \\" => true,
                    "New\nLine" => true,
                    _ => false,
                };
            }

            if (isDefinedInDisplayAttribute)
            {
                return true;
            }

            
            return name switch
            {
                nameof(global::Test.StringTesting.Quotes) => true,
                nameof(global::Test.StringTesting.LiteralQuotes) => true,
                nameof(global::Test.StringTesting.Backslash) => true,
                nameof(global::Test.StringTesting.BackslashLiteral) => true,
                nameof(global::Test.StringTesting.NewLine) => true,
                _ => false,
            };
        }

#if NETCOREAPP && !NETCOREAPP2_0 && !NETCOREAPP1_1 && !NETCOREAPP1_0
        /// <summary>
        /// Returns a boolean telling whether an enum with the given name exists in the enumeration
        /// </summary>
        /// <param name="name">The name to check if it's defined</param>
        /// <returns><c>true</c> if a member with the name exists in the enumeration, <c>false</c> otherwise</returns>
        public static bool IsDefined(in ReadOnlySpan<char> name) => IsDefined(name, allowMatchingMetadataAttribute: false);

        /// <summary>
        /// Returns a boolean telling whether an enum with the given name exists in the enumeration,
        /// or optionally if a member decorated with a <c>[Display]</c> attribute
        /// with the required name exists.
        /// Slower then the <see cref="IsDefined(string, bool)" /> overload, but doesn't allocate memory./>
        /// </summary>
        /// <param name="name">The name to check if it's defined</param>
        /// <param name="allowMatchingMetadataAttribute">If <c>true</c>, considers the value of metadata attributes,otherwise ignores them</param>
        /// <returns><c>true</c> if a member with the name exists in the enumeration, or a member is decorated
        /// with a <c>[Display]</c> attribute with the name, <c>false</c> otherwise</returns>
        public static bool IsDefined(in ReadOnlySpan<char> name, bool allowMatchingMetadataAttribute)
        {
            var isDefinedInDisplayAttribute = false;
            if (allowMatchingMetadataAttribute)
            {
                isDefinedInDisplayAttribute = name switch
                {
                    ReadOnlySpan<char> current when current.Equals("Quotes \"".AsSpan(), global::System.StringComparison.Ordinal) => true,
                    ReadOnlySpan<char> current when current.Equals("Literal Quotes \"".AsSpan(), global::System.StringComparison.Ordinal) => true,
                    ReadOnlySpan<char> current when current.Equals("Backslash \\".AsSpan(), global::System.StringComparison.Ordinal) => true,
                    ReadOnlySpan<char> current when current.Equals("LiteralBackslash \\".AsSpan(), global::System.StringComparison.Ordinal) => true,
                    ReadOnlySpan<char> current when current.Equals("New\nLine".AsSpan(), global::System.StringComparison.Ordinal) => true,
                    _ => false,
                };
            }

            if (isDefinedInDisplayAttribute)
            {
                return true;
            }

            return name switch
            {
                ReadOnlySpan<char> current when current.Equals(nameof(global::Test.StringTesting.Quotes).AsSpan(), global::System.StringComparison.Ordinal) => true,
                ReadOnlySpan<char> current when current.Equals(nameof(global::Test.StringTesting.LiteralQuotes).AsSpan(), global::System.StringComparison.Ordinal) => true,
                ReadOnlySpan<char> current when current.Equals(nameof(global::Test.StringTesting.Backslash).AsSpan(), global::System.StringComparison.Ordinal) => true,
                ReadOnlySpan<char> current when current.Equals(nameof(global::Test.StringTesting.BackslashLiteral).AsSpan(), global::System.StringComparison.Ordinal) => true,
                ReadOnlySpan<char> current when current.Equals(nameof(global::Test.StringTesting.NewLine).AsSpan(), global::System.StringComparison.Ordinal) => true,
                _ => false,
            };
        }
#endif

        /// <summary>
        /// Converts the string representation of the name or numeric value of
        /// an <see cref="global::Test.StringTesting" /> to the equivalent instance.
        /// </summary>
        /// <param name="name">The case-sensitive string representation of the enumeration name or underlying value to convert</param>
        /// <returns>An object of type <see cref="global::Test.StringTesting" /> whose
        /// value is represented by <paramref name="name"/></returns>
        public static global::Test.StringTesting Parse(
#if NETCOREAPP3_0_OR_GREATER
            [global::System.Diagnostics.CodeAnalysis.NotNullWhen(true)]
#endif
            string? name)
                => TryParse(name, out var value, false, false) ? value : ThrowValueNotFound(name);

        /// <summary>
        /// Converts the string representation of the name or numeric value of
        /// an <see cref="global::Test.StringTesting" /> to the equivalent instance.
        /// </summary>
        /// <param name="name">The case-sensitive string representation of the enumeration name or underlying value to convert</param>
        /// <param name="ignoreCase"><c>true</c> to read value in case insensitive mode; <c>false</c> to read value in case sensitive mode.</param>
        /// <returns>An object of type <see cref="global::Test.StringTesting" /> whose
        /// value is represented by <paramref name="name"/></returns>
        public static global::Test.StringTesting Parse(
#if NETCOREAPP3_0_OR_GREATER
            [global::System.Diagnostics.CodeAnalysis.NotNullWhen(true)]
#endif
            string? name,
            bool ignoreCase)
                => TryParse(name, out var value, ignoreCase, false) ? value : ThrowValueNotFound(name);

        /// <summary>
        /// Converts the string representation of the name or numeric value of
        /// an <see cref="global::Test.StringTesting" /> to the equivalent instance.
        /// </summary>
        /// <param name="name">The case-sensitive string representation of the enumeration name or underlying value to convert</param>
        /// <param name="ignoreCase"><c>true</c> to read value in case insensitive mode; <c>false</c> to read value in case sensitive mode.</param>
        /// <param name="allowMatchingMetadataAttribute">If <c>true</c>, considers the value included in metadata attributes such as
        /// <c>[Display]</c> attribute when parsing, otherwise only considers the member names.</param>
        /// <returns>An object of type <see cref="global::Test.StringTesting" /> whose
        /// value is represented by <paramref name="name"/></returns>
        public static global::Test.StringTesting Parse(
#if NETCOREAPP3_0_OR_GREATER
            [global::System.Diagnostics.CodeAnalysis.NotNullWhen(true)]
#endif
            string? name,
            bool ignoreCase,
            bool allowMatchingMetadataAttribute)
                => TryParse(name, out var value, ignoreCase, allowMatchingMetadataAttribute) ? value : ThrowValueNotFound(name);
    
#if NETCOREAPP3_0_OR_GREATER
        [global::System.Diagnostics.CodeAnalysis.DoesNotReturn]
#endif
        private static global::Test.StringTesting ThrowValueNotFound(string? name)
            => throw new global::System.ArgumentException($"Requested value '{name}' was not found.");

        /// <summary>
        /// Converts the string representation of the name or numeric value of
        /// an <see cref="global::Test.StringTesting" /> to the equivalent instance.
        /// The return value indicates whether the conversion succeeded.
        /// </summary>
        /// <param name="name">The case-sensitive string representation of the enumeration name or underlying value to convert</param>
        /// <param name="value">When this method returns, contains an object of type 
        /// <see cref="global::Test.StringTesting" /> whose
        /// value is represented by <paramref name="value"/> if the parse operation succeeds.
        /// If the parse operation fails, contains the default value of the underlying type
        /// of <see cref="global::Test.StringTesting" />. This parameter is passed uninitialized.</param>
        /// <returns><c>true</c> if the value parameter was converted successfully; otherwise, <c>false</c>.</returns>
        public static bool TryParse(
#if NETCOREAPP3_0_OR_GREATER
            [global::System.Diagnostics.CodeAnalysis.NotNullWhen(true)]
#endif
            string? name, 
            out global::Test.StringTesting value)
            => TryParse(name, out value, false, false);

        /// <summary>
        /// Converts the string representation of the name or numeric value of
        /// an <see cref="global::Test.StringTesting" /> to the equivalent instance.
        /// The return value indicates whether the conversion succeeded.
        /// </summary>
        /// <param name="name">The string representation of the enumeration name or underlying value to convert</param>
        /// <param name="value">When this method returns, contains an object of type 
        /// <see cref="global::Test.StringTesting" /> whose
        /// value is represented by <paramref name="value"/> if the parse operation succeeds.
        /// If the parse operation fails, contains the default value of the underlying type
        /// of <see cref="global::Test.StringTesting" />. This parameter is passed uninitialized.</param>
        /// <param name="ignoreCase"><c>true</c> to read value in case insensitive mode; <c>false</c> to read value in case sensitive mode.</param>
        /// <returns><c>true</c> if the value parameter was converted successfully; otherwise, <c>false</c>.</returns>
        public static bool TryParse(
#if NETCOREAPP3_0_OR_GREATER
            [global::System.Diagnostics.CodeAnalysis.NotNullWhen(true)]
#endif
            string? name, 
            out global::Test.StringTesting value,
            bool ignoreCase) 
            => TryParse(name, out value, ignoreCase, false);

        /// <summary>
        /// Converts the string representation of the name or numeric value of
        /// an <see cref="global::Test.StringTesting" /> to the equivalent instance.
        /// The return value indicates whether the conversion succeeded.
        /// </summary>
        /// <param name="name">The string representation of the enumeration name or underlying value to convert</param>
        /// <param name="value">When this method returns, contains an object of type 
        /// <see cref="global::Test.StringTesting" /> whose
        /// value is represented by <paramref name="value"/> if the parse operation succeeds.
        /// If the parse operation fails, contains the default value of the underlying type
        /// of <see cref="global::Test.StringTesting" />. This parameter is passed uninitialized.</param>
        /// <param name="ignoreCase"><c>true</c> to read value in case insensitive mode; <c>false</c> to read value in case sensitive mode.</param>
        /// <param name="allowMatchingMetadataAttribute">If <c>true</c>, considers the value included in metadata attributes such as
        /// <c>[Display]</c> attribute when parsing, otherwise only considers the member names.</param>
        /// <returns><c>true</c> if the value parameter was converted successfully; otherwise, <c>false</c>.</returns>
        public static bool TryParse(
#if NETCOREAPP3_0_OR_GREATER
            [global::System.Diagnostics.CodeAnalysis.NotNullWhen(true)]
#endif
            string? name, 
            out global::Test.StringTesting value, 
            bool ignoreCase,
            bool allowMatchingMetadataAttribute)
                => ignoreCase
                     ? TryParseIgnoreCase(name, out value, allowMatchingMetadataAttribute)
                     : TryParseWithCase(name, out value, allowMatchingMetadataAttribute);

        private static bool TryParseIgnoreCase(
#if NETCOREAPP3_0_OR_GREATER
            [global::System.Diagnostics.CodeAnalysis.NotNullWhen(true)]
#endif
            string? name,
            out global::Test.StringTesting value,
            bool allowMatchingMetadataAttribute)
        {
            if (allowMatchingMetadataAttribute)
            {
                switch (name)
                {
                    case string s when s.Equals("Quotes \"", global::System.StringComparison.OrdinalIgnoreCase):
                        value = global::Test.StringTesting.Quotes;
                        return true;
                    case string s when s.Equals("Literal Quotes \"", global::System.StringComparison.OrdinalIgnoreCase):
                        value = global::Test.StringTesting.LiteralQuotes;
                        return true;
                    case string s when s.Equals("Backslash \\", global::System.StringComparison.OrdinalIgnoreCase):
                        value = global::Test.StringTesting.Backslash;
                        return true;
                    case string s when s.Equals("LiteralBackslash \\", global::System.StringComparison.OrdinalIgnoreCase):
                        value = global::Test.StringTesting.BackslashLiteral;
                        return true;
                    case string s when s.Equals("New\nLine", global::System.StringComparison.OrdinalIgnoreCase):
                        value = global::Test.StringTesting.NewLine;
                        return true;
                    default:
                        break;
                };
            }

            switch (name)
            {
                case string s when s.Equals(nameof(global::Test.StringTesting.Quotes), global::System.StringComparison.OrdinalIgnoreCase):
                    value = global::Test.StringTesting.Quotes;
                    return true;
                case string s when s.Equals(nameof(global::Test.StringTesting.LiteralQuotes), global::System.StringComparison.OrdinalIgnoreCase):
                    value = global::Test.StringTesting.LiteralQuotes;
                    return true;
                case string s when s.Equals(nameof(global::Test.StringTesting.Backslash), global::System.StringComparison.OrdinalIgnoreCase):
                    value = global::Test.StringTesting.Backslash;
                    return true;
                case string s when s.Equals(nameof(global::Test.StringTesting.BackslashLiteral), global::System.StringComparison.OrdinalIgnoreCase):
                    value = global::Test.StringTesting.BackslashLiteral;
                    return true;
                case string s when s.Equals(nameof(global::Test.StringTesting.NewLine), global::System.StringComparison.OrdinalIgnoreCase):
                    value = global::Test.StringTesting.NewLine;
                    return true;
                case string s when int.TryParse(name, out var val):
                    value = (global::Test.StringTesting)val;
                    return true;
                default:
                    value = default;
                    return false;
            }
        }

        private static bool TryParseWithCase(
#if NETCOREAPP3_0_OR_GREATER
            [global::System.Diagnostics.CodeAnalysis.NotNullWhen(true)]
#endif
            string? name,
            out global::Test.StringTesting value,
            bool allowMatchingMetadataAttribute)
        {
            if (allowMatchingMetadataAttribute)
            {
                switch (name)
                {
                    case "Quotes \"":
                        value = global::Test.StringTesting.Quotes;
                        return true;
                    case "Literal Quotes \"":
                        value = global::Test.StringTesting.LiteralQuotes;
                        return true;
                    case "Backslash \\":
                        value = global::Test.StringTesting.Backslash;
                        return true;
                    case "LiteralBackslash \\":
                        value = global::Test.StringTesting.BackslashLiteral;
                        return true;
                    case "New\nLine":
                        value = global::Test.StringTesting.NewLine;
                        return true;
                    default:
                        break;
                };
            }

            switch (name)
            {
                case nameof(global::Test.StringTesting.Quotes):
                    value = global::Test.StringTesting.Quotes;
                    return true;
                case nameof(global::Test.StringTesting.LiteralQuotes):
                    value = global::Test.StringTesting.LiteralQuotes;
                    return true;
                case nameof(global::Test.StringTesting.Backslash):
                    value = global::Test.StringTesting.Backslash;
                    return true;
                case nameof(global::Test.StringTesting.BackslashLiteral):
                    value = global::Test.StringTesting.BackslashLiteral;
                    return true;
                case nameof(global::Test.StringTesting.NewLine):
                    value = global::Test.StringTesting.NewLine;
                    return true;
                case string s when int.TryParse(name, out var val):
                    value = (global::Test.StringTesting)val;
                    return true;
                default:
                    value = default;
                    return false;
            }
        }

#if NETCOREAPP && !NETCOREAPP2_0 && !NETCOREAPP1_1 && !NETCOREAPP1_0
        /// <summary>
        /// Converts the string representation of the name or numeric value of
        /// an <see cref="global::Test.StringTesting" /> to the equivalent instance.
        /// </summary>
        /// <param name="name">The case-sensitive string representation of the enumeration name or underlying value to convert</param>
        /// <returns>An object of type <see cref="global::Test.StringTesting" /> whose
        /// value is represented by <paramref name="name"/></returns>
        public static global::Test.StringTesting Parse(
#if NETCOREAPP3_0_OR_GREATER
            [global::System.Diagnostics.CodeAnalysis.NotNullWhen(true)]
#endif
            in ReadOnlySpan<char> name)
                => TryParse(name, out var value, false, false) ? value : ThrowValueNotFound(name.ToString());

        /// <summary>
        /// Converts the string representation of the name or numeric value of
        /// an <see cref="global::Test.StringTesting" /> to the equivalent instance.
        /// </summary>
        /// <param name="name">The case-sensitive string representation of the enumeration name or underlying value to convert</param>
        /// <param name="ignoreCase"><c>true</c> to read value in case insensitive mode; <c>false</c> to read value in case sensitive mode.</param>
        /// <returns>An object of type <see cref="global::Test.StringTesting" /> whose
        /// value is represented by <paramref name="name"/></returns>
        public static global::Test.StringTesting Parse(
#if NETCOREAPP3_0_OR_GREATER
            [global::System.Diagnostics.CodeAnalysis.NotNullWhen(true)]
#endif
            in ReadOnlySpan<char> name,
            bool ignoreCase)
                => TryParse(name, out var value, ignoreCase, false) ? value : ThrowValueNotFound(name.ToString());

        /// <summary>
        /// Converts the string representation of the name or numeric value of
        /// an <see cref="global::Test.StringTesting" /> to the equivalent instance.
        /// </summary>
        /// <param name="name">The case-sensitive string representation of the enumeration name or underlying value to convert</param>
        /// <param name="ignoreCase"><c>true</c> to read value in case insensitive mode; <c>false</c> to read value in case sensitive mode.</param>
        /// <param name="allowMatchingMetadataAttribute">If <c>true</c>, considers the value included in metadata attributes such as
        /// <c>[Display]</c> attribute when parsing, otherwise only considers the member names.</param>
        /// <returns>An object of type <see cref="global::Test.StringTesting" /> whose
        /// value is represented by <paramref name="name"/></returns>
        public static global::Test.StringTesting Parse(
#if NETCOREAPP3_0_OR_GREATER
            [global::System.Diagnostics.CodeAnalysis.NotNullWhen(true)]
#endif
            in ReadOnlySpan<char> name,
            bool ignoreCase,
            bool allowMatchingMetadataAttribute)
                => TryParse(name, out var value, ignoreCase, allowMatchingMetadataAttribute) ? value : ThrowValueNotFound(name.ToString());

        /// <summary>
        /// Converts the span representation of the name or numeric value of
        /// an <see cref="global::Test.StringTesting" /> to the equivalent instance.
        /// The return value indicates whether the conversion succeeded.
        /// </summary>
        /// <param name="name">The span representation of the enumeration name or underlying value to convert</param>
        /// <param name="value">When this method returns, contains an object of type 
        /// <see cref="global::Test.StringTesting" /> whose
        /// value is represented by <paramref name="value"/> if the parse operation succeeds.
        /// If the parse operation fails, contains the default value of the underlying type
        /// of <see cref="global::Test.StringTesting" />. This parameter is passed uninitialized.</param>
        /// <returns><c>true</c> if the value parameter was converted successfully; otherwise, <c>false</c>.</returns>
        public static bool TryParse(
#if NETCOREAPP3_0_OR_GREATER
            [global::System.Diagnostics.CodeAnalysis.NotNullWhen(true)]
#endif
            in ReadOnlySpan<char> name, 
            out global::Test.StringTesting value)
            => TryParse(name, out value, false, false);

        /// <summary>
        /// Converts the span representation of the name or numeric value of
        /// an <see cref="global::Test.StringTesting" /> to the equivalent instance.
        /// The return value indicates whether the conversion succeeded.
        /// </summary>
        /// <param name="name">The span representation of the enumeration name or underlying value to convert</param>
        /// <param name="value">When this method returns, contains an object of type 
        /// <see cref="global::Test.StringTesting" /> whose
        /// value is represented by <paramref name="value"/> if the parse operation succeeds.
        /// If the parse operation fails, contains the default value of the underlying type
        /// of <see cref="global::Test.StringTesting" />. This parameter is passed uninitialized.</param>
        /// <param name="ignoreCase"><c>true</c> to read value in case insensitive mode; <c>false</c> to read value in case sensitive mode.</param>
        /// <returns><c>true</c> if the value parameter was converted successfully; otherwise, <c>false</c>.</returns>
        public static bool TryParse(
#if NETCOREAPP3_0_OR_GREATER
            [global::System.Diagnostics.CodeAnalysis.NotNullWhen(true)]
#endif
            in ReadOnlySpan<char> name,
            out global::Test.StringTesting value,
            bool ignoreCase)
            => TryParse(name, out value, ignoreCase, false);

        /// <summary>
        /// Converts the span representation of the name or numeric value of
        /// an <see cref="global::Test.StringTesting" /> to the equivalent instance.
        /// The return value indicates whether the conversion succeeded.
        /// </summary>
        /// <param name="name">The span representation of the enumeration name or underlying value to convert</param>
        /// <param name="result">When this method returns, contains an object of type 
        /// <see cref="global::Test.StringTesting" /> whose
        /// value is represented by <paramref name="result"/> if the parse operation succeeds.
        /// If the parse operation fails, contains the default value of the underlying type
        /// of <see cref="global::Test.StringTesting" />. This parameter is passed uninitialized.</param>
        /// <param name="ignoreCase"><c>true</c> to read value in case insensitive mode; <c>false</c> to read value in case sensitive mode.</param>
        /// <param name="allowMatchingMetadataAttribute">If <c>true</c>, considers the value included in metadata attributes such as
        /// <c>[Display]</c> attribute when parsing, otherwise only considers the member names.</param>
        /// <returns><c>true</c> if the value parameter was converted successfully; otherwise, <c>false</c>.</returns>
        public static bool TryParse(
#if NETCOREAPP3_0_OR_GREATER
            [global::System.Diagnostics.CodeAnalysis.NotNullWhen(true)]
#endif
            in ReadOnlySpan<char> name,
            out global::Test.StringTesting result,
            bool ignoreCase,
            bool allowMatchingMetadataAttribute)
                => ignoreCase
                     ? TryParseIgnoreCase(in name, out result, allowMatchingMetadataAttribute)
                     : TryParseWithCase(in name, out result, allowMatchingMetadataAttribute);

        private static bool TryParseIgnoreCase(
#if NETCOREAPP3_0_OR_GREATER
            [global::System.Diagnostics.CodeAnalysis.NotNullWhen(true)]
#endif
            in ReadOnlySpan<char> name,
            out global::Test.StringTesting result,
            bool allowMatchingMetadataAttribute)
        {
            if (allowMatchingMetadataAttribute)
            {
                switch (name)
                {
                    case ReadOnlySpan<char> current when current.Equals("Quotes \"".AsSpan(), global::System.StringComparison.OrdinalIgnoreCase):
                        result = global::Test.StringTesting.Quotes;
                        return true;
                    case ReadOnlySpan<char> current when current.Equals("Literal Quotes \"".AsSpan(), global::System.StringComparison.OrdinalIgnoreCase):
                        result = global::Test.StringTesting.LiteralQuotes;
                        return true;
                    case ReadOnlySpan<char> current when current.Equals("Backslash \\".AsSpan(), global::System.StringComparison.OrdinalIgnoreCase):
                        result = global::Test.StringTesting.Backslash;
                        return true;
                    case ReadOnlySpan<char> current when current.Equals("LiteralBackslash \\".AsSpan(), global::System.StringComparison.OrdinalIgnoreCase):
                        result = global::Test.StringTesting.BackslashLiteral;
                        return true;
                    case ReadOnlySpan<char> current when current.Equals("New\nLine".AsSpan(), global::System.StringComparison.OrdinalIgnoreCase):
                        result = global::Test.StringTesting.NewLine;
                        return true;
                    default:
                        break;
                };
            }

            switch (name)
            {
                case ReadOnlySpan<char> current when current.Equals(nameof(global::Test.StringTesting.Quotes).AsSpan(), global::System.StringComparison.OrdinalIgnoreCase):
                    result = global::Test.StringTesting.Quotes;
                    return true;
                case ReadOnlySpan<char> current when current.Equals(nameof(global::Test.StringTesting.LiteralQuotes).AsSpan(), global::System.StringComparison.OrdinalIgnoreCase):
                    result = global::Test.StringTesting.LiteralQuotes;
                    return true;
                case ReadOnlySpan<char> current when current.Equals(nameof(global::Test.StringTesting.Backslash).AsSpan(), global::System.StringComparison.OrdinalIgnoreCase):
                    result = global::Test.StringTesting.Backslash;
                    return true;
                case ReadOnlySpan<char> current when current.Equals(nameof(global::Test.StringTesting.BackslashLiteral).AsSpan(), global::System.StringComparison.OrdinalIgnoreCase):
                    result = global::Test.StringTesting.BackslashLiteral;
                    return true;
                case ReadOnlySpan<char> current when current.Equals(nameof(global::Test.StringTesting.NewLine).AsSpan(), global::System.StringComparison.OrdinalIgnoreCase):
                    result = global::Test.StringTesting.NewLine;
                    return true;
                case ReadOnlySpan<char> current when int.TryParse(name, out var numericResult):
                    result = (global::Test.StringTesting)numericResult;
                    return true;
                default:
                    result = default;
                    return false;
            }
        }

        private static bool TryParseWithCase(
#if NETCOREAPP3_0_OR_GREATER
            [global::System.Diagnostics.CodeAnalysis.NotNullWhen(true)]
#endif
            in ReadOnlySpan<char> name,
            out global::Test.StringTesting result,
            bool allowMatchingMetadataAttribute)
        {
            if (allowMatchingMetadataAttribute)
            {
                switch (name)
                {
                    case ReadOnlySpan<char> current when current.Equals("Quotes \"".AsSpan(), global::System.StringComparison.Ordinal):
                        result = global::Test.StringTesting.Quotes;
                        return true;
                    case ReadOnlySpan<char> current when current.Equals("Literal Quotes \"".AsSpan(), global::System.StringComparison.Ordinal):
                        result = global::Test.StringTesting.LiteralQuotes;
                        return true;
                    case ReadOnlySpan<char> current when current.Equals("Backslash \\".AsSpan(), global::System.StringComparison.Ordinal):
                        result = global::Test.StringTesting.Backslash;
                        return true;
                    case ReadOnlySpan<char> current when current.Equals("LiteralBackslash \\".AsSpan(), global::System.StringComparison.Ordinal):
                        result = global::Test.StringTesting.BackslashLiteral;
                        return true;
                    case ReadOnlySpan<char> current when current.Equals("New\nLine".AsSpan(), global::System.StringComparison.Ordinal):
                        result = global::Test.StringTesting.NewLine;
                        return true;
                    default:
                        break;
                };
            }

            switch (name)
            {
                case ReadOnlySpan<char> current when current.Equals(nameof(global::Test.StringTesting.Quotes).AsSpan(), global::System.StringComparison.Ordinal):
                    result = global::Test.StringTesting.Quotes;
                    return true;
                case ReadOnlySpan<char> current when current.Equals(nameof(global::Test.StringTesting.LiteralQuotes).AsSpan(), global::System.StringComparison.Ordinal):
                    result = global::Test.StringTesting.LiteralQuotes;
                    return true;
                case ReadOnlySpan<char> current when current.Equals(nameof(global::Test.StringTesting.Backslash).AsSpan(), global::System.StringComparison.Ordinal):
                    result = global::Test.StringTesting.Backslash;
                    return true;
                case ReadOnlySpan<char> current when current.Equals(nameof(global::Test.StringTesting.BackslashLiteral).AsSpan(), global::System.StringComparison.Ordinal):
                    result = global::Test.StringTesting.BackslashLiteral;
                    return true;
                case ReadOnlySpan<char> current when current.Equals(nameof(global::Test.StringTesting.NewLine).AsSpan(), global::System.StringComparison.Ordinal):
                    result = global::Test.StringTesting.NewLine;
                    return true;
                case ReadOnlySpan<char> current when int.TryParse(name, out var numericResult):
                    result = (global::Test.StringTesting)numericResult;
                    return true;
                default:
                    result = default;
                    return false;
            }
        }
#endif

        /// <summary>
        /// Retrieves an array of the values of the members defined in
        /// <see cref="global::Test.StringTesting" />.
        /// Note that this returns a new array with every invocation, so
        /// should be cached if appropriate.
        /// </summary>
        /// <returns>An array of the values defined in <see cref="global::Test.StringTesting" /></returns>
        public static global::Test.StringTesting[] GetValues()
        {
            return new[]
            {
                global::Test.StringTesting.Quotes,
                global::Test.StringTesting.LiteralQuotes,
                global::Test.StringTesting.Backslash,
                global::Test.StringTesting.BackslashLiteral,
                global::Test.StringTesting.NewLine,
            };
        }

        /// <summary>
        /// Retrieves an array of the names of the members defined in
        /// <see cref="global::Test.StringTesting" />.
        /// Note that this returns a new array with every invocation, so
        /// should be cached if appropriate.
        /// </summary>
        /// <returns>An array of the names of the members defined in <see cref="global::Test.StringTesting" /></returns>
        public static string[] GetNames()
        {
            return new[]
            {
                nameof(global::Test.StringTesting.Quotes),
                nameof(global::Test.StringTesting.LiteralQuotes),
                nameof(global::Test.StringTesting.Backslash),
                nameof(global::Test.StringTesting.BackslashLiteral),
                nameof(global::Test.StringTesting.NewLine),
            };
        }
    }
#pragma warning restore CS0612 // Ignore usages of obsolete members or enums
#pragma warning restore CS0618 // Ignore usages of obsolete members or enums
}