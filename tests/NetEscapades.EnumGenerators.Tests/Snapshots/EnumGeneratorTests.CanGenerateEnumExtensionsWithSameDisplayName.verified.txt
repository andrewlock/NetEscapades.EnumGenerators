//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the NetEscapades.EnumGenerators source generator
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#nullable enable
namespace MyTestNameSpace
{
    public static partial class MyEnumExtensions
    {
        /// <summary>
        /// The number of members in the enum.
        /// This is a non-distinct count of defined names.
        /// </summary>
        public const int Length = 4;

        public static string ToStringFast(this MyTestNameSpace.MyEnum value)
            => value switch
            {
                MyTestNameSpace.MyEnum.First => nameof(MyTestNameSpace.MyEnum.First),
                MyTestNameSpace.MyEnum.Second => "2nd",
                MyTestNameSpace.MyEnum.Third => nameof(MyTestNameSpace.MyEnum.Third),
                MyTestNameSpace.MyEnum.Fourth => "2nd",
                _ => value.ToString(),
            };

       public static bool IsDefined(MyTestNameSpace.MyEnum value)
            => value switch
            {
                MyTestNameSpace.MyEnum.First => true,
                MyTestNameSpace.MyEnum.Second => true,
                MyTestNameSpace.MyEnum.Third => true,
                MyTestNameSpace.MyEnum.Fourth => true,
                _ => false,
            };

        public static bool IsDefined(string name, bool allowMatchingMetadataAttribute)
        {
            var isDefinedInDisplayAttribute = false;
            if (allowMatchingMetadataAttribute)
            {
                isDefinedInDisplayAttribute = name switch
                {
                    "2nd" => true,
                    _ => false,
                };
            }

            if (isDefinedInDisplayAttribute)
            {
                return true;
            }

            
            return name switch
            {
                nameof(MyTestNameSpace.MyEnum.First) => true,
                nameof(MyTestNameSpace.MyEnum.Second) => true,
                nameof(MyTestNameSpace.MyEnum.Third) => true,
                nameof(MyTestNameSpace.MyEnum.Fourth) => true,
                _ => false,
            };
        }

        public static bool TryParse(
#if NETCOREAPP3_0_OR_GREATER
            [System.Diagnostics.CodeAnalysis.NotNullWhen(true)]
#endif
            string? name, 
            out MyTestNameSpace.MyEnum value)
            => TryParse(name, out value, false, false);

        public static bool TryParse(
#if NETCOREAPP3_0_OR_GREATER
            [System.Diagnostics.CodeAnalysis.NotNullWhen(true)]
#endif
            string? name, 
            out MyTestNameSpace.MyEnum value,
            bool ignoreCase) 
            => TryParse(name, out value, ignoreCase, false);

        public static bool TryParse(
#if NETCOREAPP3_0_OR_GREATER
            [System.Diagnostics.CodeAnalysis.NotNullWhen(true)]
#endif
            string? name, 
            out MyTestNameSpace.MyEnum value, 
            bool ignoreCase, 
            bool allowMatchingMetadataAttribute)
        {
            if (allowMatchingMetadataAttribute)
            {
                if (ignoreCase)
                {
                    switch (name)
                    {
                        case string s when s.Equals("2nd", System.StringComparison.OrdinalIgnoreCase):
                            value = MyTestNameSpace.MyEnum.Second;
                            return true;
                        default:
                            break;
                    };
                }
                else
                {
                    switch (name)
                    {
                        case "2nd":
                            value = MyTestNameSpace.MyEnum.Second;
                            return true;
                        default:
                            break;
                    };
                }
            }

            if (ignoreCase)
            {
                switch (name)
                {
                    case string s when s.Equals(nameof(MyTestNameSpace.MyEnum.First), System.StringComparison.OrdinalIgnoreCase):
                        value = MyTestNameSpace.MyEnum.First;
                        return true;
                    case string s when s.Equals(nameof(MyTestNameSpace.MyEnum.Second), System.StringComparison.OrdinalIgnoreCase):
                        value = MyTestNameSpace.MyEnum.Second;
                        return true;
                    case string s when s.Equals(nameof(MyTestNameSpace.MyEnum.Third), System.StringComparison.OrdinalIgnoreCase):
                        value = MyTestNameSpace.MyEnum.Third;
                        return true;
                    case string s when s.Equals(nameof(MyTestNameSpace.MyEnum.Fourth), System.StringComparison.OrdinalIgnoreCase):
                        value = MyTestNameSpace.MyEnum.Fourth;
                        return true;
                    case string s when int.TryParse(name, out var val):
                        value = (MyTestNameSpace.MyEnum)val;
                        return true;
                    default:
                        value = default;
                        return false;
                }
            }
            else
            {
                switch (name)
                {
                    case nameof(MyTestNameSpace.MyEnum.First):
                        value = MyTestNameSpace.MyEnum.First;
                        return true;
                    case nameof(MyTestNameSpace.MyEnum.Second):
                        value = MyTestNameSpace.MyEnum.Second;
                        return true;
                    case nameof(MyTestNameSpace.MyEnum.Third):
                        value = MyTestNameSpace.MyEnum.Third;
                        return true;
                    case nameof(MyTestNameSpace.MyEnum.Fourth):
                        value = MyTestNameSpace.MyEnum.Fourth;
                        return true;
                    case string s when int.TryParse(name, out var val):
                        value = (MyTestNameSpace.MyEnum)val;
                        return true;
                    default:
                        value = default;
                        return false;
                }
            }
        }

        public static MyTestNameSpace.MyEnum[] GetValues()
        {
            return new[]
            {
                MyTestNameSpace.MyEnum.First,
                MyTestNameSpace.MyEnum.Second,
                MyTestNameSpace.MyEnum.Third,
                MyTestNameSpace.MyEnum.Fourth,
            };
        }

        public static string[] GetNames()
        {
            return new[]
            {
                nameof(MyTestNameSpace.MyEnum.First),
                nameof(MyTestNameSpace.MyEnum.Second),
                nameof(MyTestNameSpace.MyEnum.Third),
                nameof(MyTestNameSpace.MyEnum.Fourth),
            };
        }
    }
}